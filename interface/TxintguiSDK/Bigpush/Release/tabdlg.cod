	TITLE	E:\interface\TxintguiSDK\Bigpush\tabdlg.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_05PBMO@?$CGStop?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07EIMN@?$CGResume?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PMPB@QQQ?$CB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MBDE@qqq?$CB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JMOF@Throttle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DLGG@Roll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LMAM@Nick?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NEEI@Tail?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LDNL@Pitch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05CJCA@Func6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05IDLH@Func7?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05ICOK@Func8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05CIHN@Func9?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FCOM@Func10?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06PIHL@Func11?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HMC@Func12?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NEPN@?$CFi?$CF?$CF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04FEFO@100?$CF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FDHG@?$CK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tab1DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tab4DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tab5DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrackBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
_BSS	SEGMENT
_?iOldItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48898 DD 01H DUP (?)
_?iNewItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48900 DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_?toggle@?1??Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z@4_NA$S48801 DB 01H
	ORG $+3
_?bfirsttime@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4_NA$S48903 DB 01H
_DATA	ENDS
PUBLIC	?Tab1DlgProc@@YGHPAUHWND__@@IIJ@Z		; Tab1DlgProc
PUBLIC	??_C@_05PBMO@?$CGStop?$AA@			; `string'
PUBLIC	??_C@_07EIMN@?$CGResume?$AA@			; `string'
PUBLIC	??_C@_04PMPB@QQQ?$CB?$AA@			; `string'
PUBLIC	??_C@_04MBDE@qqq?$CB?$AA@			; `string'
EXTRN	__imp__GetDlgItem@8:NEAR
EXTRN	__imp__SetBkColor@8:NEAR
EXTRN	__imp__SetWindowTextA@8:NEAR
EXTRN	__imp__SetTextColor@8:NEAR
EXTRN	__imp__MessageBoxA@16:NEAR
EXTRN	__imp__SetFocus@4:NEAR
EXTRN	?g_bStop@@3_NA:BYTE				; g_bStop
EXTRN	?g_crColor@@3KA:DWORD				; g_crColor
EXTRN	__imp__GetSysColor@4:NEAR
EXTRN	?TabCenter@@YAXPAUHWND__@@@Z:NEAR		; TabCenter
EXTRN	__imp__SendMessageA@16:NEAR
EXTRN	__imp__GetStockObject@4:NEAR
;	COMDAT ??_C@_05PBMO@?$CGStop?$AA@
; File E:\interface\TxintguiSDK\Bigpush\tabdlg.cpp
_DATA	SEGMENT
??_C@_05PBMO@?$CGStop?$AA@ DB '&Stop', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07EIMN@?$CGResume?$AA@
_DATA	SEGMENT
??_C@_07EIMN@?$CGResume?$AA@ DB '&Resume', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PMPB@QQQ?$CB?$AA@
_DATA	SEGMENT
??_C@_04PMPB@QQQ?$CB?$AA@ DB 'QQQ!', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04MBDE@qqq?$CB?$AA@
_DATA	SEGMENT
??_C@_04MBDE@qqq?$CB?$AA@ DB 'qqq!', 00H		; `string'
_DATA	ENDS
;	COMDAT ?Tab1DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?Tab1DlgProc@@YGHPAUHWND__@@IIJ@Z PROC NEAR		; Tab1DlgProc, COMDAT

; 27   :   HBRUSH hBrushDlg;
; 28   :   
; 29   : 
; 30   :   switch(uMsg)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _uMsg$[esp-4]
  00004	56		 push	 esi
  00005	05 00 ff ff ff	 add	 eax, -256		; ffffff00H
  0000a	83 f8 38	 cmp	 eax, 56			; 00000038H
  0000d	0f 87 50 01 00
	00		 ja	 $L48780
  00013	33 c9		 xor	 ecx, ecx
  00015	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR $L49747[eax]
  0001b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L49748[ecx*4]
$L48751:

; 31   :   {
; 32   :       case WM_INITDIALOG:
; 33   :           TabCenter(hWnd);

  00022	8b 74 24 08	 mov	 esi, DWORD PTR _hWnd$[esp]
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ?TabCenter@@YAXPAUHWND__@@@Z ; TabCenter
  0002c	83 c4 04	 add	 esp, 4

; 34   : 		  SetFocus(hWnd);

  0002f	56		 push	 esi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 35   : 		  
; 36   : 		  if (!g_bStop) Button_SetText( GetDlgItem(hWnd,IDC_BUTTON1), "&Stop" );

  00036	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bStop@@3_NA ; g_bStop
  0003b	84 c0		 test	 al, al
  0003d	75 07		 jne	 SHORT $L48752
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBMO@?$CGStop?$AA@ ; `string'

; 37   : 		  else Button_SetText( GetDlgItem(hWnd,IDC_BUTTON1), "&Resume" );

  00044	eb 05		 jmp	 SHORT $L49746
$L48752:
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EIMN@?$CGResume?$AA@ ; `string'
$L49746:
  0004b	68 31 04 00 00	 push	 1073			; 00000431H
  00050	56		 push	 esi
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00057	50		 push	 eax
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 92   :           return (UINT)hBrushDlg ;
; 93   : 		  break;
; 94   : 	  //case WM_PAINT:
; 95   : 			//PAINTSTRUCT ps;
; 96   : 			//BeginPaint(hWnd, &ps);
; 97   : 			
; 98   : 			//EndPaint(hWnd, &ps);
; 99   : 			//return 0;
; 100  : 	      //break;
; 101  : 	  /*case WM_DESTROY:
; 102  : 		  UnhookWindowsHookEx(hHook);
; 103  : 		  break;*/
; 104  :  
; 105  :       default:
; 106  :           return(FALSE);

  0005e	33 c0		 xor	 eax, eax

; 107  :   }
; 108  :  
; 109  :   return(0);
; 110  : }

  00060	5e		 pop	 esi
  00061	c2 10 00	 ret	 16			; 00000010H
$L48756:

; 38   : 
; 39   : 		  // we need a hook to get key messages in dialog
; 40   : 		  //hHook = SetWindowsHookEx( WH_KEYBOARD, (HOOKPROC)KeyboardProc, NULL, GetCurrentThreadId() );
; 41   : 		  //hHook = SetWindowsHookEx( WH_MSGFILTER, (HOOKPROC)MessageProc, NULL, GetCurrentThreadId() );
; 42   : 
; 43   : 		  break;
; 44   :       case WM_COMMAND:
; 45   : 			switch( LOWORD(wParam) )

  00064	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  00068	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0006d	48		 dec	 eax
  0006e	0f 84 ef 00 00
	00		 je	 $L48780
  00074	2d f6 03 00 00	 sub	 eax, 1014		; 000003f6H
  00079	74 63		 je	 SHORT $L48767
  0007b	83 e8 3a	 sub	 eax, 58			; 0000003aH
  0007e	0f 85 df 00 00
	00		 jne	 $L48780

; 46   : 			{
; 47   : 				case IDOK:
; 48   : 
; 49   : 					break;
; 50   : 				case IDCANCEL:
; 51   : 
; 52   : 					break;
; 53   : 				case IDC_BUTTON1:
; 54   : 					g_bStop = !g_bStop;

  00084	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?g_bStop@@3_NA ; g_bStop
  0008a	33 c0		 xor	 eax, eax
  0008c	84 d2		 test	 dl, dl
  0008e	0f 94 c0	 sete	 al

; 55   : 					if (!g_bStop) Button_SetText( GetDlgItem(hWnd,IDC_BUTTON1), "&Stop" );

  00091	84 c0		 test	 al, al
  00093	a2 00 00 00 00	 mov	 BYTE PTR ?g_bStop@@3_NA, al ; g_bStop
  00098	75 22		 jne	 SHORT $L48765
  0009a	8b 54 24 08	 mov	 edx, DWORD PTR _hWnd$[esp]
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBMO@?$CGStop?$AA@ ; `string'
  000a3	68 31 04 00 00	 push	 1073			; 00000431H
  000a8	52		 push	 edx
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000af	50		 push	 eax
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 92   :           return (UINT)hBrushDlg ;
; 93   : 		  break;
; 94   : 	  //case WM_PAINT:
; 95   : 			//PAINTSTRUCT ps;
; 96   : 			//BeginPaint(hWnd, &ps);
; 97   : 			
; 98   : 			//EndPaint(hWnd, &ps);
; 99   : 			//return 0;
; 100  : 	      //break;
; 101  : 	  /*case WM_DESTROY:
; 102  : 		  UnhookWindowsHookEx(hHook);
; 103  : 		  break;*/
; 104  :  
; 105  :       default:
; 106  :           return(FALSE);

  000b6	33 c0		 xor	 eax, eax

; 107  :   }
; 108  :  
; 109  :   return(0);
; 110  : }

  000b8	5e		 pop	 esi
  000b9	c2 10 00	 ret	 16			; 00000010H
$L48765:

; 56   : 					else Button_SetText( GetDlgItem(hWnd,IDC_BUTTON1), "&Resume" );

  000bc	8b 44 24 08	 mov	 eax, DWORD PTR _hWnd$[esp]
  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EIMN@?$CGResume?$AA@ ; `string'
  000c5	68 31 04 00 00	 push	 1073			; 00000431H
  000ca	50		 push	 eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000d1	50		 push	 eax
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 92   :           return (UINT)hBrushDlg ;
; 93   : 		  break;
; 94   : 	  //case WM_PAINT:
; 95   : 			//PAINTSTRUCT ps;
; 96   : 			//BeginPaint(hWnd, &ps);
; 97   : 			
; 98   : 			//EndPaint(hWnd, &ps);
; 99   : 			//return 0;
; 100  : 	      //break;
; 101  : 	  /*case WM_DESTROY:
; 102  : 		  UnhookWindowsHookEx(hHook);
; 103  : 		  break;*/
; 104  :  
; 105  :       default:
; 106  :           return(FALSE);

  000d8	33 c0		 xor	 eax, eax

; 107  :   }
; 108  :  
; 109  :   return(0);
; 110  : }

  000da	5e		 pop	 esi
  000db	c2 10 00	 ret	 16			; 00000010H
$L48767:

; 57   : 					break;
; 58   : 				case IDC_BUTTON2:
; 59   : 					ListBox_ResetContent( GetDlgItem(hWnd,IDC_LIST1) );

  000de	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  000e2	6a 00		 push	 0
  000e4	6a 00		 push	 0
  000e6	68 84 01 00 00	 push	 388			; 00000184H
  000eb	68 74 04 00 00	 push	 1140			; 00000474H
  000f0	51		 push	 ecx
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000f7	50		 push	 eax
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 92   :           return (UINT)hBrushDlg ;
; 93   : 		  break;
; 94   : 	  //case WM_PAINT:
; 95   : 			//PAINTSTRUCT ps;
; 96   : 			//BeginPaint(hWnd, &ps);
; 97   : 			
; 98   : 			//EndPaint(hWnd, &ps);
; 99   : 			//return 0;
; 100  : 	      //break;
; 101  : 	  /*case WM_DESTROY:
; 102  : 		  UnhookWindowsHookEx(hHook);
; 103  : 		  break;*/
; 104  :  
; 105  :       default:
; 106  :           return(FALSE);

  000fe	33 c0		 xor	 eax, eax

; 107  :   }
; 108  :  
; 109  :   return(0);
; 110  : }

  00100	5e		 pop	 esi
  00101	c2 10 00	 ret	 16			; 00000010H
$L48770:

; 60   : 					break;
; 61   : 			}
; 62   : 			break;
; 63   :       /*case WM_RBUTTONDOWN:
; 64   : 			  MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 65   : 			  return 0;
; 66   : 		  break;*/
; 67   : 	  case WM_KEYDOWN: // fuck, why not???
; 68   : 		  // because catching key input in dialogs takes special steps
; 69   : 		  // see: the froggie apps
; 70   :           //if (VK_HOME == wParam)
; 71   : 			  MessageBox(NULL,"qqq!","QQQ!",MB_OK);

  00104	6a 00		 push	 0
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PMPB@QQQ?$CB?$AA@ ; `string'
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MBDE@qqq?$CB?$AA@ ; `string'
  00110	6a 00		 push	 0
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 92   :           return (UINT)hBrushDlg ;
; 93   : 		  break;
; 94   : 	  //case WM_PAINT:
; 95   : 			//PAINTSTRUCT ps;
; 96   : 			//BeginPaint(hWnd, &ps);
; 97   : 			
; 98   : 			//EndPaint(hWnd, &ps);
; 99   : 			//return 0;
; 100  : 	      //break;
; 101  : 	  /*case WM_DESTROY:
; 102  : 		  UnhookWindowsHookEx(hHook);
; 103  : 		  break;*/
; 104  :  
; 105  :       default:
; 106  :           return(FALSE);

  00118	33 c0		 xor	 eax, eax

; 107  :   }
; 108  :  
; 109  :   return(0);
; 110  : }

  0011a	5e		 pop	 esi
  0011b	c2 10 00	 ret	 16			; 00000010H
$L48773:

; 72   : 			  return 0;
; 73   : 		  break;
; 74   : 	  /*case WM_LBUTTONDOWN:
; 75   : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 76   : 			POINT pt;
; 77   : 			pt.x = LOWORD(lParam);
; 78   : 			pt.y = HIWORD(lParam);
; 79   : 
; 80   : 			// works only with static controls, not progress bars
; 81   : 			// and works only if static control is not in group box
; 82   : 			if ( ChildWindowFromPoint(hWnd, pt) == GetDlgItem(hWnd, IDC_STATICQQQ) ) {
; 83   : 				MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 84   : 			}
; 85   : 			break;*/
; 86   : 	  case WM_CTLCOLORSTATIC:
; 87   : 		  if ((HWND)lParam == GetDlgItem(hWnd,IDC_STATICSTATUS))

  0011e	8b 54 24 08	 mov	 edx, DWORD PTR _hWnd$[esp]
  00122	68 6b 04 00 00	 push	 1131			; 0000046bH
  00127	52		 push	 edx
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0012e	8b 4c 24 14	 mov	 ecx, DWORD PTR _lParam$[esp]
  00132	8b 74 24 10	 mov	 esi, DWORD PTR _wParam$[esp]
  00136	3b c8		 cmp	 ecx, eax
  00138	75 0d		 jne	 SHORT $L48775

; 88   : 			  SetTextColor( (HDC)wParam, g_crColor );

  0013a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_crColor@@3KA ; g_crColor
  0013f	50		 push	 eax
  00140	56		 push	 esi
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8
$L48775:

; 89   : 
; 90   : 		  SetBkColor( (HDC)wParam, GetSysColor(COLOR_MENU) ); // zet alleen background van characters niet van entire window

  00147	6a 04		 push	 4
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0014f	50		 push	 eax
  00150	56		 push	 esi
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkColor@8

; 91   : 		  hBrushDlg = (HBRUSH)GetStockObject(NULL_BRUSH) ;

  00157	6a 05		 push	 5
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4

; 107  :   }
; 108  :  
; 109  :   return(0);
; 110  : }

  0015f	5e		 pop	 esi
  00160	c2 10 00	 ret	 16			; 00000010H
$L48780:

; 92   :           return (UINT)hBrushDlg ;
; 93   : 		  break;
; 94   : 	  //case WM_PAINT:
; 95   : 			//PAINTSTRUCT ps;
; 96   : 			//BeginPaint(hWnd, &ps);
; 97   : 			
; 98   : 			//EndPaint(hWnd, &ps);
; 99   : 			//return 0;
; 100  : 	      //break;
; 101  : 	  /*case WM_DESTROY:
; 102  : 		  UnhookWindowsHookEx(hHook);
; 103  : 		  break;*/
; 104  :  
; 105  :       default:
; 106  :           return(FALSE);

  00163	33 c0		 xor	 eax, eax

; 107  :   }
; 108  :  
; 109  :   return(0);
; 110  : }

  00165	5e		 pop	 esi
  00166	c2 10 00	 ret	 16			; 00000010H
  00169	90		 npad	 1
  0016a	8b ff		 npad	 2
$L49748:
  0016c	00 00 00 00	 DD	 $L48770
  00170	00 00 00 00	 DD	 $L48751
  00174	00 00 00 00	 DD	 $L48756
  00178	00 00 00 00	 DD	 $L48773
  0017c	00 00 00 00	 DD	 $L48780
$L49747:
  00180	00		 DB	 0
  00181	04		 DB	 4
  00182	04		 DB	 4
  00183	04		 DB	 4
  00184	04		 DB	 4
  00185	04		 DB	 4
  00186	04		 DB	 4
  00187	04		 DB	 4
  00188	04		 DB	 4
  00189	04		 DB	 4
  0018a	04		 DB	 4
  0018b	04		 DB	 4
  0018c	04		 DB	 4
  0018d	04		 DB	 4
  0018e	04		 DB	 4
  0018f	04		 DB	 4
  00190	01		 DB	 1
  00191	02		 DB	 2
  00192	04		 DB	 4
  00193	04		 DB	 4
  00194	04		 DB	 4
  00195	04		 DB	 4
  00196	04		 DB	 4
  00197	04		 DB	 4
  00198	04		 DB	 4
  00199	04		 DB	 4
  0019a	04		 DB	 4
  0019b	04		 DB	 4
  0019c	04		 DB	 4
  0019d	04		 DB	 4
  0019e	04		 DB	 4
  0019f	04		 DB	 4
  001a0	04		 DB	 4
  001a1	04		 DB	 4
  001a2	04		 DB	 4
  001a3	04		 DB	 4
  001a4	04		 DB	 4
  001a5	04		 DB	 4
  001a6	04		 DB	 4
  001a7	04		 DB	 4
  001a8	04		 DB	 4
  001a9	04		 DB	 4
  001aa	04		 DB	 4
  001ab	04		 DB	 4
  001ac	04		 DB	 4
  001ad	04		 DB	 4
  001ae	04		 DB	 4
  001af	04		 DB	 4
  001b0	04		 DB	 4
  001b1	04		 DB	 4
  001b2	04		 DB	 4
  001b3	04		 DB	 4
  001b4	04		 DB	 4
  001b5	04		 DB	 4
  001b6	04		 DB	 4
  001b7	04		 DB	 4
  001b8	03		 DB	 3
?Tab1DlgProc@@YGHPAUHWND__@@IIJ@Z ENDP			; Tab1DlgProc
_TEXT	ENDS
PUBLIC	?Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z		; Tab2DlgProc
PUBLIC	?Tab5DlgProc@@YGHPAUHWND__@@IIJ@Z		; Tab5DlgProc
PUBLIC	?ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar1SubclassProc
PUBLIC	?ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar2SubclassProc
PUBLIC	?ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar3SubclassProc
PUBLIC	?ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar4SubclassProc
PUBLIC	?ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar5SubclassProc
PUBLIC	?ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar6SubclassProc
PUBLIC	?ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar7SubclassProc
PUBLIC	?ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar8SubclassProc
PUBLIC	?ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar9SubclassProc
PUBLIC	?ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z	; ProgressBar10SubclassProc
EXTRN	_ChooseColorA@4:NEAR
EXTRN	?g_hInst@@3PAUHINSTANCE__@@A:DWORD		; g_hInst
EXTRN	?g_hWnd@@3PAUHWND__@@A:DWORD			; g_hWnd
EXTRN	?g_hTabCurrent@@3PAUHWND__@@A:DWORD		; g_hTabCurrent
EXTRN	?g_bHorizontal@@3_NA:BYTE			; g_bHorizontal
EXTRN	?COLOR_CONNECTED@@3KA:DWORD			; COLOR_CONNECTED
EXTRN	?g_crColorBar@@3PAKA:BYTE			; g_crColorBar
EXTRN	?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar1Proc
EXTRN	?wpOrigProgressBar2Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar2Proc
EXTRN	?wpOrigProgressBar3Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar3Proc
EXTRN	?wpOrigProgressBar4Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar4Proc
EXTRN	?wpOrigProgressBar5Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar5Proc
EXTRN	?wpOrigProgressBar6Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar6Proc
EXTRN	?wpOrigProgressBar7Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar7Proc
EXTRN	?wpOrigProgressBar8Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar8Proc
EXTRN	?wpOrigProgressBar9Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar9Proc
EXTRN	?wpOrigProgressBar10Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigProgressBar10Proc
EXTRN	?g_bChMute@@3PA_NA:BYTE				; g_bChMute
EXTRN	?g_bChInv@@3PAKA:BYTE				; g_bChInv
EXTRN	?g_hinst@@3PAUHINSTANCE__@@A:DWORD		; g_hinst
EXTRN	?g_hwndDlg@@3PAUHWND__@@A:DWORD			; g_hwndDlg
EXTRN	?g_hhk@@3PAUHHOOK__@@A:DWORD			; g_hhk
EXTRN	__imp__SetWindowLongA@12:NEAR
EXTRN	__imp__SetClassLongA@12:NEAR
EXTRN	?DoCreateDialogTooltip@@YAHXZ:NEAR		; DoCreateDialogTooltip
EXTRN	?OnWMNotify@@YAXJ@Z:NEAR			; OnWMNotify
EXTRN	?RegistryRead@@YAXXZ:NEAR			; RegistryRead
EXTRN	?RegistryWrite@@YAXXZ:NEAR			; RegistryWrite
EXTRN	__imp__UnhookWindowsHookEx@4:NEAR
EXTRN	__imp__LoadIconA@8:NEAR
EXTRN	__imp__DestroyWindow@4:NEAR
EXTRN	__imp__ShowWindow@8:NEAR
EXTRN	__imp__CreateDialogParamA@20:NEAR
_BSS	SEGMENT
_?acrCustClr@?1??Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z@4PAKA$S48790 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_cc$ = -36
?Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z PROC NEAR		; Tab2DlgProc, COMDAT

; 120  : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi

; 121  : 	HICON hIcon;
; 122  : 	//POINT pt;
; 123  : 	int i;
; 124  : 
; 125  : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 126  : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 127  : 	//HWND hwnd;                      // owner window
; 128  : 	//HBRUSH hbrush;                  // brush handle
; 129  : 	//static DWORD rgbCurrent;        // initial color selection
; 130  : 	
; 131  : 	// Initialize CHOOSECOLOR 
; 132  : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 133  : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 134  : 	cc.hwndOwner = hWnd;

  00006	8b 74 24 34	 mov	 esi, DWORD PTR _hWnd$[esp+44]
  0000a	57		 push	 edi
  0000b	b9 09 00 00 00	 mov	 ecx, 9
  00010	33 c0		 xor	 eax, eax
  00012	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00016	f3 ab		 rep stosd

; 135  : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 136  : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 137  : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 138  : 	
; 139  : 	static bool toggle = true;
; 140  : 
; 141  : 
; 142  : 	
; 143  : 	switch(uMsg)

  00018	8b 44 24 3c	 mov	 eax, DWORD PTR _uMsg$[esp+48]
  0001c	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00024	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00027	89 74 24 14	 mov	 DWORD PTR _cc$[esp+56], esi
  0002b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z@4PAKA$S48790
  00033	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003b	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00043	77 3c		 ja	 SHORT $L49750
  00045	74 21		 je	 SHORT $L48887
  00047	83 e8 02	 sub	 eax, 2
  0004a	0f 85 22 06 00
	00		 jne	 $L48803

; 300  : 			break;
; 301  : 
; 302  : 		case WM_DESTROY:
; 303  : 			// tooltips unhook, unhook!!!
; 304  : 			UnhookWindowsHookEx(g_hhk);

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hhk@@3PAUHHOOK__@@A ; g_hhk
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  0005c	33 c0		 xor	 eax, eax

; 312  : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5d		 pop	 ebp
  00061	5b		 pop	 ebx
  00062	83 c4 24	 add	 esp, 36			; 00000024H
  00065	c2 10 00	 ret	 16			; 00000010H
$L48887:

; 295  : 			break;
; 296  : 
; 297  : 		case WM_NOTIFY:
; 298  : 			// tooltips
; 299  : 			OnWMNotify(lParam);

  00068	8b 4c 24 44	 mov	 ecx, DWORD PTR _lParam$[esp+48]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ?OnWMNotify@@YAXJ@Z	; OnWMNotify
  00072	83 c4 04	 add	 esp, 4

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00075	33 c0		 xor	 eax, eax

; 312  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5d		 pop	 ebp
  0007a	5b		 pop	 ebx
  0007b	83 c4 24	 add	 esp, 36			; 00000024H
  0007e	c2 10 00	 ret	 16			; 00000010H
$L49750:

; 135  : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 136  : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 137  : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 138  : 	
; 139  : 	static bool toggle = true;
; 140  : 
; 141  : 
; 142  : 	
; 143  : 	switch(uMsg)

  00081	2d 00 01 00 00	 sub	 eax, 256		; 00000100H
  00086	0f 84 d2 05 00
	00		 je	 $L48843
  0008c	83 e8 10	 sub	 eax, 16			; 00000010H
  0008f	0f 84 e4 03 00
	00		 je	 $L48806
  00095	48		 dec	 eax

; 305  : 			break;
; 306  : 
; 307  : 		default:
; 308  : 			return(FALSE);

  00096	0f 85 d6 05 00
	00		 jne	 $L48803
  0009c	8b 54 24 40	 mov	 edx, DWORD PTR _wParam$[esp+48]
  000a0	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  000a6	8d 82 c5 fb ff
	ff		 lea	 eax, DWORD PTR [edx-1083]
  000ac	83 f8 75	 cmp	 eax, 117		; 00000075H
  000af	0f 87 b3 03 00
	00		 ja	 $L48847

; 215  : 				  //return 0;
; 216  : 			//}
; 217  : 			break;
; 218  : 		/*case WM_LBUTTONDOWN:
; 219  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 220  : 			POINT pt;
; 221  : 			pt.x = LOWORD(lParam);
; 222  : 			pt.y = HIWORD(lParam);
; 223  : 
; 224  : 			// works only with static controls, not progress bars
; 225  : 			// and works only if static control is not in group box
; 226  : 			if ( ChildWindowFromPoint(hWnd, pt) == GetDlgItem(hWnd, IDC_STATICEXP) ) {
; 227  : 				MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 228  : 			}
; 229  : 			break;*/
; 230  : 		case WM_COMMAND:
; 231  : 			switch( LOWORD(wParam) )

  000b5	33 c9		 xor	 ecx, ecx
  000b7	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR $L49765[eax]
  000bd	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L49766[ecx*4]
$L48850:

; 232  : 			{
; 233  : 				case IDC_BUTTONHORIZONTAL:
; 234  : 					if (g_hTabCurrent != NULL)

  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  000c9	85 c0		 test	 eax, eax
  000cb	74 07		 je	 SHORT $L48851

; 235  : 						DestroyWindow(g_hTabCurrent);

  000cd	50		 push	 eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$L48851:

; 236  : 					g_hTabCurrent = CreateDialog(g_hInst,MAKEINTRESOURCE(IDD_DIALOG5),g_hWnd,(DLGPROC)Tab5DlgProc); 

  000d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_hWnd@@3PAUHWND__@@A ; g_hWnd
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
  000df	6a 00		 push	 0
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:?Tab5DlgProc@@YGHPAUHWND__@@IIJ@Z ; Tab5DlgProc
  000e6	52		 push	 edx
  000e7	6a 70		 push	 112			; 00000070H
  000e9	50		 push	 eax
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamA@20

; 237  : 					ShowWindow(g_hTabCurrent, SW_SHOW);

  000f0	6a 05		 push	 5
  000f2	50		 push	 eax
  000f3	a3 00 00 00 00	 mov	 DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A, eax ; g_hTabCurrent
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 238  : 
; 239  : 					g_bHorizontal = true;

  000fe	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bHorizontal@@3_NA, 1 ; g_bHorizontal

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00105	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  0010a	33 c0		 xor	 eax, eax

; 312  : }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5d		 pop	 ebp
  0010f	5b		 pop	 ebx
  00110	83 c4 24	 add	 esp, 36			; 00000024H
  00113	c2 10 00	 ret	 16			; 00000010H
$L48856:

; 240  : 					break;
; 241  : 				case IDC_BUTTONCOLOR:
; 242  : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 243  : 					if (ChooseColor(&cc)==TRUE) {

  00116	8d 4c 24 10	 lea	 ecx, DWORD PTR _cc$[esp+52]
  0011a	51		 push	 ecx
  0011b	e8 00 00 00 00	 call	 _ChooseColorA@4
  00120	83 f8 01	 cmp	 eax, 1
  00123	0f 85 3f 03 00
	00		 jne	 $L48847

; 244  : 						//hbrush = CreateSolidBrush(cc.rgbResult);
; 245  : 						//COLOUR_BAR = cc.rgbResult;
; 246  : 						for (i=0; i<=11; i++) {
; 247  : 							g_crColorBar[i] = cc.rgbResult;

  00129	8b 44 24 1c	 mov	 eax, DWORD PTR _cc$[esp+64]
  0012d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00132	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:?g_crColorBar@@3PAKA ; g_crColorBar

; 248  : 						}
; 249  : 						COLOR_CONNECTED = cc.rgbResult;

  00137	a3 00 00 00 00	 mov	 DWORD PTR ?COLOR_CONNECTED@@3KA, eax ; COLOR_CONNECTED
  0013c	f3 ab		 rep stosd

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  0013e	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00143	33 c0		 xor	 eax, eax

; 312  : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5d		 pop	 ebp
  00148	5b		 pop	 ebx
  00149	83 c4 24	 add	 esp, 36			; 00000024H
  0014c	c2 10 00	 ret	 16			; 00000010H
$L48861:

; 250  : 					}
; 251  : 					break;
; 252  : 
; 253  : 				// channel mute
; 254  : 				case IDC_CHECK21: g_bChMute[1] = !g_bChMute[1]; break;

  0014f	a0 01 00 00 00	 mov	 al, BYTE PTR ?g_bChMute@@3PA_NA+1
  00154	33 d2		 xor	 edx, edx
  00156	84 c0		 test	 al, al
  00158	0f 94 c2	 sete	 dl
  0015b	88 15 01 00 00
	00		 mov	 BYTE PTR ?g_bChMute@@3PA_NA+1, dl

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00161	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00166	33 c0		 xor	 eax, eax

; 312  : }

  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5d		 pop	 ebp
  0016b	5b		 pop	 ebx
  0016c	83 c4 24	 add	 esp, 36			; 00000024H
  0016f	c2 10 00	 ret	 16			; 00000010H
$L48862:

; 255  : 				case IDC_CHECK22: g_bChMute[2] = !g_bChMute[2]; break;

  00172	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ?g_bChMute@@3PA_NA+2
  00178	33 c0		 xor	 eax, eax
  0017a	84 c9		 test	 cl, cl
  0017c	0f 94 c0	 sete	 al
  0017f	a2 02 00 00 00	 mov	 BYTE PTR ?g_bChMute@@3PA_NA+2, al

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00184	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00189	33 c0		 xor	 eax, eax

; 312  : }

  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5d		 pop	 ebp
  0018e	5b		 pop	 ebx
  0018f	83 c4 24	 add	 esp, 36			; 00000024H
  00192	c2 10 00	 ret	 16			; 00000010H
$L48863:

; 256  : 				case IDC_CHECK23: g_bChMute[3] = !g_bChMute[3]; break;

  00195	a0 03 00 00 00	 mov	 al, BYTE PTR ?g_bChMute@@3PA_NA+3
  0019a	33 c9		 xor	 ecx, ecx
  0019c	84 c0		 test	 al, al
  0019e	0f 94 c1	 sete	 cl
  001a1	88 0d 03 00 00
	00		 mov	 BYTE PTR ?g_bChMute@@3PA_NA+3, cl

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  001a7	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  001ac	33 c0		 xor	 eax, eax

; 312  : }

  001ae	5f		 pop	 edi
  001af	5e		 pop	 esi
  001b0	5d		 pop	 ebp
  001b1	5b		 pop	 ebx
  001b2	83 c4 24	 add	 esp, 36			; 00000024H
  001b5	c2 10 00	 ret	 16			; 00000010H
$L48864:

; 257  : 				case IDC_CHECK24: g_bChMute[4] = !g_bChMute[4]; break;

  001b8	a0 04 00 00 00	 mov	 al, BYTE PTR ?g_bChMute@@3PA_NA+4
  001bd	33 d2		 xor	 edx, edx
  001bf	84 c0		 test	 al, al
  001c1	0f 94 c2	 sete	 dl
  001c4	88 15 04 00 00
	00		 mov	 BYTE PTR ?g_bChMute@@3PA_NA+4, dl

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  001ca	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  001cf	33 c0		 xor	 eax, eax

; 312  : }

  001d1	5f		 pop	 edi
  001d2	5e		 pop	 esi
  001d3	5d		 pop	 ebp
  001d4	5b		 pop	 ebx
  001d5	83 c4 24	 add	 esp, 36			; 00000024H
  001d8	c2 10 00	 ret	 16			; 00000010H
$L48865:

; 258  : 				case IDC_CHECK25: g_bChMute[5] = !g_bChMute[5]; break;

  001db	8a 0d 05 00 00
	00		 mov	 cl, BYTE PTR ?g_bChMute@@3PA_NA+5
  001e1	33 c0		 xor	 eax, eax
  001e3	84 c9		 test	 cl, cl
  001e5	0f 94 c0	 sete	 al
  001e8	a2 05 00 00 00	 mov	 BYTE PTR ?g_bChMute@@3PA_NA+5, al

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  001ed	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  001f2	33 c0		 xor	 eax, eax

; 312  : }

  001f4	5f		 pop	 edi
  001f5	5e		 pop	 esi
  001f6	5d		 pop	 ebp
  001f7	5b		 pop	 ebx
  001f8	83 c4 24	 add	 esp, 36			; 00000024H
  001fb	c2 10 00	 ret	 16			; 00000010H
$L48866:

; 259  : 				case IDC_CHECK26: g_bChMute[6] = !g_bChMute[6]; break;

  001fe	a0 06 00 00 00	 mov	 al, BYTE PTR ?g_bChMute@@3PA_NA+6
  00203	33 c9		 xor	 ecx, ecx
  00205	84 c0		 test	 al, al
  00207	0f 94 c1	 sete	 cl
  0020a	88 0d 06 00 00
	00		 mov	 BYTE PTR ?g_bChMute@@3PA_NA+6, cl

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00210	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00215	33 c0		 xor	 eax, eax

; 312  : }

  00217	5f		 pop	 edi
  00218	5e		 pop	 esi
  00219	5d		 pop	 ebp
  0021a	5b		 pop	 ebx
  0021b	83 c4 24	 add	 esp, 36			; 00000024H
  0021e	c2 10 00	 ret	 16			; 00000010H
$L48867:

; 260  : 				case IDC_CHECK27: g_bChMute[7] = !g_bChMute[7]; break;

  00221	a0 07 00 00 00	 mov	 al, BYTE PTR ?g_bChMute@@3PA_NA+7
  00226	33 d2		 xor	 edx, edx
  00228	84 c0		 test	 al, al
  0022a	0f 94 c2	 sete	 dl
  0022d	88 15 07 00 00
	00		 mov	 BYTE PTR ?g_bChMute@@3PA_NA+7, dl

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00233	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00238	33 c0		 xor	 eax, eax

; 312  : }

  0023a	5f		 pop	 edi
  0023b	5e		 pop	 esi
  0023c	5d		 pop	 ebp
  0023d	5b		 pop	 ebx
  0023e	83 c4 24	 add	 esp, 36			; 00000024H
  00241	c2 10 00	 ret	 16			; 00000010H
$L48868:

; 261  : 				case IDC_CHECK28: g_bChMute[8] = !g_bChMute[8]; break;

  00244	8a 0d 08 00 00
	00		 mov	 cl, BYTE PTR ?g_bChMute@@3PA_NA+8
  0024a	33 c0		 xor	 eax, eax
  0024c	84 c9		 test	 cl, cl
  0024e	0f 94 c0	 sete	 al
  00251	a2 08 00 00 00	 mov	 BYTE PTR ?g_bChMute@@3PA_NA+8, al

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00256	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  0025b	33 c0		 xor	 eax, eax

; 312  : }

  0025d	5f		 pop	 edi
  0025e	5e		 pop	 esi
  0025f	5d		 pop	 ebp
  00260	5b		 pop	 ebx
  00261	83 c4 24	 add	 esp, 36			; 00000024H
  00264	c2 10 00	 ret	 16			; 00000010H
$L48869:

; 262  : 				case IDC_CHECK29: g_bChMute[9] = !g_bChMute[9]; break;

  00267	a0 09 00 00 00	 mov	 al, BYTE PTR ?g_bChMute@@3PA_NA+9
  0026c	33 c9		 xor	 ecx, ecx
  0026e	84 c0		 test	 al, al
  00270	0f 94 c1	 sete	 cl
  00273	88 0d 09 00 00
	00		 mov	 BYTE PTR ?g_bChMute@@3PA_NA+9, cl

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00279	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  0027e	33 c0		 xor	 eax, eax

; 312  : }

  00280	5f		 pop	 edi
  00281	5e		 pop	 esi
  00282	5d		 pop	 ebp
  00283	5b		 pop	 ebx
  00284	83 c4 24	 add	 esp, 36			; 00000024H
  00287	c2 10 00	 ret	 16			; 00000010H
$L48870:

; 263  : 				case IDC_CHECK30: g_bChMute[10] = !g_bChMute[10]; break;

  0028a	a0 0a 00 00 00	 mov	 al, BYTE PTR ?g_bChMute@@3PA_NA+10
  0028f	33 d2		 xor	 edx, edx
  00291	84 c0		 test	 al, al
  00293	0f 94 c2	 sete	 dl
  00296	88 15 0a 00 00
	00		 mov	 BYTE PTR ?g_bChMute@@3PA_NA+10, dl

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  0029c	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  002a1	33 c0		 xor	 eax, eax

; 312  : }

  002a3	5f		 pop	 edi
  002a4	5e		 pop	 esi
  002a5	5d		 pop	 ebp
  002a6	5b		 pop	 ebx
  002a7	83 c4 24	 add	 esp, 36			; 00000024H
  002aa	c2 10 00	 ret	 16			; 00000010H
$L48871:

; 264  : 
; 265  : 				case IDC_BUTTONMASTER:					
; 266  : 					toggle = !toggle;

  002ad	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR _?toggle@?1??Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z@4_NA$S48801

; 270  : 							g_bChMute[i] = false;

  002b3	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageA@16
  002b9	33 c0		 xor	 eax, eax

; 312  : }

  002bb	bf a7 04 00 00	 mov	 edi, 1191		; 000004a7H
  002c0	84 d2		 test	 dl, dl
  002c2	0f 94 c0	 sete	 al
  002c5	bb 01 00 00 00	 mov	 ebx, OFFSET FLAT:?g_bChMute@@3PA_NA+1
  002ca	a2 00 00 00 00	 mov	 BYTE PTR _?toggle@?1??Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z@4_NA$S48801, al
  002cf	2b df		 sub	 ebx, edi
  002d1	eb 05		 jmp	 SHORT $L48872
$L49759:

; 270  : 							g_bChMute[i] = false;

  002d3	a0 00 00 00 00	 mov	 al, BYTE PTR _?toggle@?1??Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z@4_NA$S48801
$L48872:

; 267  : 
; 268  : 					for (i=1; i<=10; i++) {
; 269  : 						if (toggle) {

  002d8	84 c0		 test	 al, al
  002da	74 0a		 je	 SHORT $L48875

; 271  : 							SendMessage( GetDlgItem(hWnd, IDC_CHECK21+(i-1)), BM_SETCHECK, BST_UNCHECKED, 0 );

  002dc	6a 00		 push	 0
  002de	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  002e2	6a 00		 push	 0

; 272  : 						} else {

  002e4	eb 08		 jmp	 SHORT $L49762
$L48875:

; 273  : 							g_bChMute[i] = true;
; 274  : 							SendMessage( GetDlgItem(hWnd, IDC_CHECK21+(i-1)), BM_SETCHECK, BST_CHECKED, 0 );

  002e6	6a 00		 push	 0
  002e8	c6 04 3b 01	 mov	 BYTE PTR [ebx+edi], 1
  002ec	6a 01		 push	 1
$L49762:
  002ee	68 f1 00 00 00	 push	 241			; 000000f1H
  002f3	57		 push	 edi
  002f4	56		 push	 esi
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  002fb	50		 push	 eax
  002fc	ff d5		 call	 ebp
  002fe	47		 inc	 edi
  002ff	8d 87 5a fb ff
	ff		 lea	 eax, DWORD PTR [edi-1190]
  00305	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00308	7e c9		 jle	 SHORT $L49759

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  0030a	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  0030f	33 c0		 xor	 eax, eax

; 312  : }

  00311	5f		 pop	 edi
  00312	5e		 pop	 esi
  00313	5d		 pop	 ebp
  00314	5b		 pop	 ebx
  00315	83 c4 24	 add	 esp, 36			; 00000024H
  00318	c2 10 00	 ret	 16			; 00000010H
$L48877:

; 275  : 						}
; 276  : 					}
; 277  : 					break;
; 278  : 
; 279  : 				
; 280  : 				// channel invert
; 281  : 				case IDC_CHECK11: g_bChInv[1] = !g_bChInv[1]; break;

  0031b	a1 04 00 00 00	 mov	 eax, DWORD PTR ?g_bChInv@@3PAKA+4
  00320	33 c9		 xor	 ecx, ecx
  00322	85 c0		 test	 eax, eax
  00324	0f 94 c1	 sete	 cl
  00327	89 0d 04 00 00
	00		 mov	 DWORD PTR ?g_bChInv@@3PAKA+4, ecx

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  0032d	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00332	33 c0		 xor	 eax, eax

; 312  : }

  00334	5f		 pop	 edi
  00335	5e		 pop	 esi
  00336	5d		 pop	 ebp
  00337	5b		 pop	 ebx
  00338	83 c4 24	 add	 esp, 36			; 00000024H
  0033b	c2 10 00	 ret	 16			; 00000010H
$L48878:

; 282  : 				case IDC_CHECK12: g_bChInv[2] = !g_bChInv[2]; break;

  0033e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?g_bChInv@@3PAKA+8
  00343	33 d2		 xor	 edx, edx
  00345	85 c0		 test	 eax, eax
  00347	0f 94 c2	 sete	 dl
  0034a	89 15 08 00 00
	00		 mov	 DWORD PTR ?g_bChInv@@3PAKA+8, edx

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00350	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00355	33 c0		 xor	 eax, eax

; 312  : }

  00357	5f		 pop	 edi
  00358	5e		 pop	 esi
  00359	5d		 pop	 ebp
  0035a	5b		 pop	 ebx
  0035b	83 c4 24	 add	 esp, 36			; 00000024H
  0035e	c2 10 00	 ret	 16			; 00000010H
$L48879:

; 283  : 				case IDC_CHECK13: g_bChInv[3] = !g_bChInv[3]; break;

  00361	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?g_bChInv@@3PAKA+12
  00367	33 c0		 xor	 eax, eax
  00369	85 c9		 test	 ecx, ecx
  0036b	0f 94 c0	 sete	 al
  0036e	a3 0c 00 00 00	 mov	 DWORD PTR ?g_bChInv@@3PAKA+12, eax

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00373	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00378	33 c0		 xor	 eax, eax

; 312  : }

  0037a	5f		 pop	 edi
  0037b	5e		 pop	 esi
  0037c	5d		 pop	 ebp
  0037d	5b		 pop	 ebx
  0037e	83 c4 24	 add	 esp, 36			; 00000024H
  00381	c2 10 00	 ret	 16			; 00000010H
$L48880:

; 284  : 				case IDC_CHECK14: g_bChInv[4] = !g_bChInv[4]; break;

  00384	a1 10 00 00 00	 mov	 eax, DWORD PTR ?g_bChInv@@3PAKA+16
  00389	33 c9		 xor	 ecx, ecx
  0038b	85 c0		 test	 eax, eax
  0038d	0f 94 c1	 sete	 cl
  00390	89 0d 10 00 00
	00		 mov	 DWORD PTR ?g_bChInv@@3PAKA+16, ecx

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00396	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  0039b	33 c0		 xor	 eax, eax

; 312  : }

  0039d	5f		 pop	 edi
  0039e	5e		 pop	 esi
  0039f	5d		 pop	 ebp
  003a0	5b		 pop	 ebx
  003a1	83 c4 24	 add	 esp, 36			; 00000024H
  003a4	c2 10 00	 ret	 16			; 00000010H
$L48881:

; 285  : 				case IDC_CHECK15: g_bChInv[5] = !g_bChInv[5]; break;

  003a7	a1 14 00 00 00	 mov	 eax, DWORD PTR ?g_bChInv@@3PAKA+20
  003ac	33 d2		 xor	 edx, edx
  003ae	85 c0		 test	 eax, eax
  003b0	0f 94 c2	 sete	 dl
  003b3	89 15 14 00 00
	00		 mov	 DWORD PTR ?g_bChInv@@3PAKA+20, edx

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  003b9	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  003be	33 c0		 xor	 eax, eax

; 312  : }

  003c0	5f		 pop	 edi
  003c1	5e		 pop	 esi
  003c2	5d		 pop	 ebp
  003c3	5b		 pop	 ebx
  003c4	83 c4 24	 add	 esp, 36			; 00000024H
  003c7	c2 10 00	 ret	 16			; 00000010H
$L48882:

; 286  : 				case IDC_CHECK16: g_bChInv[6] = !g_bChInv[6]; break;

  003ca	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?g_bChInv@@3PAKA+24
  003d0	33 c0		 xor	 eax, eax
  003d2	85 c9		 test	 ecx, ecx
  003d4	0f 94 c0	 sete	 al
  003d7	a3 18 00 00 00	 mov	 DWORD PTR ?g_bChInv@@3PAKA+24, eax

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  003dc	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  003e1	33 c0		 xor	 eax, eax

; 312  : }

  003e3	5f		 pop	 edi
  003e4	5e		 pop	 esi
  003e5	5d		 pop	 ebp
  003e6	5b		 pop	 ebx
  003e7	83 c4 24	 add	 esp, 36			; 00000024H
  003ea	c2 10 00	 ret	 16			; 00000010H
$L48883:

; 287  : 				case IDC_CHECK17: g_bChInv[7] = !g_bChInv[7]; break;

  003ed	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?g_bChInv@@3PAKA+28
  003f2	33 c9		 xor	 ecx, ecx
  003f4	85 c0		 test	 eax, eax
  003f6	0f 94 c1	 sete	 cl
  003f9	89 0d 1c 00 00
	00		 mov	 DWORD PTR ?g_bChInv@@3PAKA+28, ecx

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  003ff	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00404	33 c0		 xor	 eax, eax

; 312  : }

  00406	5f		 pop	 edi
  00407	5e		 pop	 esi
  00408	5d		 pop	 ebp
  00409	5b		 pop	 ebx
  0040a	83 c4 24	 add	 esp, 36			; 00000024H
  0040d	c2 10 00	 ret	 16			; 00000010H
$L48884:

; 288  : 				case IDC_CHECK18: g_bChInv[8] = !g_bChInv[8]; break;

  00410	a1 20 00 00 00	 mov	 eax, DWORD PTR ?g_bChInv@@3PAKA+32
  00415	33 d2		 xor	 edx, edx
  00417	85 c0		 test	 eax, eax
  00419	0f 94 c2	 sete	 dl
  0041c	89 15 20 00 00
	00		 mov	 DWORD PTR ?g_bChInv@@3PAKA+32, edx

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00422	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00427	33 c0		 xor	 eax, eax

; 312  : }

  00429	5f		 pop	 edi
  0042a	5e		 pop	 esi
  0042b	5d		 pop	 ebp
  0042c	5b		 pop	 ebx
  0042d	83 c4 24	 add	 esp, 36			; 00000024H
  00430	c2 10 00	 ret	 16			; 00000010H
$L48885:

; 289  : 				case IDC_CHECK19: g_bChInv[9] = !g_bChInv[9]; break;

  00433	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR ?g_bChInv@@3PAKA+36
  00439	33 c0		 xor	 eax, eax
  0043b	85 c9		 test	 ecx, ecx
  0043d	0f 94 c0	 sete	 al
  00440	a3 24 00 00 00	 mov	 DWORD PTR ?g_bChInv@@3PAKA+36, eax

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00445	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  0044a	33 c0		 xor	 eax, eax

; 312  : }

  0044c	5f		 pop	 edi
  0044d	5e		 pop	 esi
  0044e	5d		 pop	 ebp
  0044f	5b		 pop	 ebx
  00450	83 c4 24	 add	 esp, 36			; 00000024H
  00453	c2 10 00	 ret	 16			; 00000010H
$L48886:

; 290  : 				case IDC_CHECK20: g_bChInv[10] = !g_bChInv[10]; break;

  00456	a1 28 00 00 00	 mov	 eax, DWORD PTR ?g_bChInv@@3PAKA+40
  0045b	33 c9		 xor	 ecx, ecx
  0045d	85 c0		 test	 eax, eax
  0045f	0f 94 c1	 sete	 cl
  00462	89 0d 28 00 00
	00		 mov	 DWORD PTR ?g_bChInv@@3PAKA+40, ecx
$L48847:

; 291  : 			}
; 292  : 
; 293  : 			// write to registry
; 294  : 			RegistryWrite();

  00468	e8 00 00 00 00	 call	 ?RegistryWrite@@YAXXZ	; RegistryWrite

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  0046d	33 c0		 xor	 eax, eax

; 312  : }

  0046f	5f		 pop	 edi
  00470	5e		 pop	 esi
  00471	5d		 pop	 ebp
  00472	5b		 pop	 ebx
  00473	83 c4 24	 add	 esp, 36			; 00000024H
  00476	c2 10 00	 ret	 16			; 00000010H
$L48806:

; 144  : 	{
; 145  : 		case WM_INITDIALOG:
; 146  : 			TabCenter(hWnd);

  00479	56		 push	 esi
  0047a	e8 00 00 00 00	 call	 ?TabCenter@@YAXPAUHWND__@@@Z ; TabCenter
  0047f	83 c4 04	 add	 esp, 4

; 147  : 			//MessageBox(NULL,"QQQ","xxx",MB_OK);
; 148  : 			SetFocus(hWnd);

  00482	56		 push	 esi
  00483	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 149  : 
; 150  : 			hIcon = LoadIcon( g_hInst, (LPCSTR)MAKEINTRESOURCE(IDI_ICON2) );

  00489	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
  0048f	68 8f 00 00 00	 push	 143			; 0000008fH
  00494	52		 push	 edx
  00495	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8

; 151  : 			SendMessage( GetDlgItem(hWnd, IDC_BUTTONCOLOR), BM_SETIMAGE, IMAGE_ICON, (LPARAM)hIcon );

  0049b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  004a1	50		 push	 eax
  004a2	6a 01		 push	 1
  004a4	68 f7 00 00 00	 push	 247			; 000000f7H
  004a9	68 89 04 00 00	 push	 1161			; 00000489H
  004ae	56		 push	 esi
  004af	ff d7		 call	 edi
  004b1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  004b7	50		 push	 eax
  004b8	ff d3		 call	 ebx

; 152  : 			
; 153  : 			
; 154  : 			// This is very nice but we better set the colors via a customized color dialog box
; 155  : 			// (or maybe we should just drop the gratuitous idea of individual bar colors)
; 156  : 			// Or should we...
; 157  : 			// Subclass the progress bar control
; 158  : 			// This allows is to catch mouse clicks in the progress bar window
; 159  : 			// We can then initiate a color dialog for setting the bar's color
; 160  : 			wpOrigProgressBar1Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT1), GWL_WNDPROC, (LONG)ProgressBar1SubclassProc );

  004ba	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar1SubclassProc
  004bf	6a fc		 push	 -4			; fffffffcH
  004c1	68 7f 04 00 00	 push	 1151			; 0000047fH
  004c6	56		 push	 esi
  004c7	ff d7		 call	 edi
  004c9	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetWindowLongA@12
  004cf	50		 push	 eax
  004d0	ff d5		 call	 ebp

; 161  : 			wpOrigProgressBar2Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT2), GWL_WNDPROC, (LONG)ProgressBar2SubclassProc );

  004d2	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar2SubclassProc
  004d7	6a fc		 push	 -4			; fffffffcH
  004d9	68 80 04 00 00	 push	 1152			; 00000480H
  004de	56		 push	 esi
  004df	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar1Proc
  004e4	ff d7		 call	 edi
  004e6	50		 push	 eax
  004e7	ff d5		 call	 ebp

; 162  : 			wpOrigProgressBar3Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT3), GWL_WNDPROC, (LONG)ProgressBar3SubclassProc );

  004e9	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar3SubclassProc
  004ee	6a fc		 push	 -4			; fffffffcH
  004f0	68 81 04 00 00	 push	 1153			; 00000481H
  004f5	56		 push	 esi
  004f6	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar2Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar2Proc
  004fb	ff d7		 call	 edi
  004fd	50		 push	 eax
  004fe	ff d5		 call	 ebp

; 163  : 			wpOrigProgressBar4Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT4), GWL_WNDPROC, (LONG)ProgressBar4SubclassProc );

  00500	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar4SubclassProc
  00505	6a fc		 push	 -4			; fffffffcH
  00507	68 82 04 00 00	 push	 1154			; 00000482H
  0050c	56		 push	 esi
  0050d	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar3Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar3Proc
  00512	ff d7		 call	 edi
  00514	50		 push	 eax
  00515	ff d5		 call	 ebp

; 164  : 			wpOrigProgressBar5Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT5), GWL_WNDPROC, (LONG)ProgressBar5SubclassProc );

  00517	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar5SubclassProc
  0051c	6a fc		 push	 -4			; fffffffcH
  0051e	68 83 04 00 00	 push	 1155			; 00000483H
  00523	56		 push	 esi
  00524	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar4Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar4Proc
  00529	ff d7		 call	 edi
  0052b	50		 push	 eax
  0052c	ff d5		 call	 ebp

; 165  : 			wpOrigProgressBar6Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT6), GWL_WNDPROC, (LONG)ProgressBar6SubclassProc );

  0052e	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar6SubclassProc
  00533	6a fc		 push	 -4			; fffffffcH
  00535	68 84 04 00 00	 push	 1156			; 00000484H
  0053a	56		 push	 esi
  0053b	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar5Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar5Proc
  00540	ff d7		 call	 edi
  00542	50		 push	 eax
  00543	ff d5		 call	 ebp

; 166  : 			wpOrigProgressBar7Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT7), GWL_WNDPROC, (LONG)ProgressBar7SubclassProc );

  00545	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar7SubclassProc
  0054a	6a fc		 push	 -4			; fffffffcH
  0054c	68 85 04 00 00	 push	 1157			; 00000485H
  00551	56		 push	 esi
  00552	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar6Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar6Proc
  00557	ff d7		 call	 edi
  00559	50		 push	 eax
  0055a	ff d5		 call	 ebp

; 167  : 			wpOrigProgressBar8Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT8), GWL_WNDPROC, (LONG)ProgressBar8SubclassProc );

  0055c	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar8SubclassProc
  00561	6a fc		 push	 -4			; fffffffcH
  00563	68 86 04 00 00	 push	 1158			; 00000486H
  00568	56		 push	 esi
  00569	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar7Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar7Proc
  0056e	ff d7		 call	 edi
  00570	50		 push	 eax
  00571	ff d5		 call	 ebp

; 168  : 			wpOrigProgressBar9Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT9), GWL_WNDPROC, (LONG)ProgressBar9SubclassProc );

  00573	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar9SubclassProc
  00578	6a fc		 push	 -4			; fffffffcH
  0057a	68 87 04 00 00	 push	 1159			; 00000487H
  0057f	56		 push	 esi
  00580	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar8Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar8Proc
  00585	ff d7		 call	 edi
  00587	50		 push	 eax
  00588	ff d5		 call	 ebp

; 169  : 			wpOrigProgressBar10Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT10), GWL_WNDPROC, (LONG)ProgressBar10SubclassProc );

  0058a	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar10SubclassProc
  0058f	6a fc		 push	 -4			; fffffffcH
  00591	68 88 04 00 00	 push	 1160			; 00000488H
  00596	56		 push	 esi
  00597	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar9Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar9Proc
  0059c	ff d7		 call	 edi
  0059e	50		 push	 eax
  0059f	ff d5		 call	 ebp

; 170  : 			
; 171  : 
; 172  : 			
; 173  : 			// Huh?! This is enough to make *all* progress bars respond to double-clicks
; 174  : 			// dat komt natuurlijk omdat je de Class style van progress bars verandert
; 175  : 			// Als je SetWindowLong() zou gebruiken moest je dat voor alle windows afzonderlijk doen
; 176  : 			// Echter, er bestaat geen WS_DBLCLKS...
; 177  : 			// make the fucker respond to double-clicks
; 178  : 			SetClassLong( GetDlgItem(hWnd, IDC_PROGRESSVERT1), GCL_STYLE, (LONG)CS_DBLCLKS );

  005a1	6a 08		 push	 8
  005a3	6a e6		 push	 -26			; ffffffe6H
  005a5	68 7f 04 00 00	 push	 1151			; 0000047fH
  005aa	56		 push	 esi
  005ab	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar10Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar10Proc
  005b0	ff d7		 call	 edi
  005b2	50		 push	 eax
  005b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetClassLongA@12

; 179  : 			//SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSVERT1), GWL_STYLE, (LONG)(LONG)WS_DBLCLKS );
; 180  : 
; 181  : 			
; 182  : 			// read registry
; 183  : 			RegistryRead();

  005b9	e8 00 00 00 00	 call	 ?RegistryRead@@YAXXZ	; RegistryRead

; 312  : }

  005be	bd 9d 04 00 00	 mov	 ebp, 1181		; 0000049dH
  005c3	c7 44 24 38 04
	00 00 00	 mov	 DWORD PTR 8+[esp+48], OFFSET FLAT:?g_bChInv@@3PAKA+4
$L48833:
  005cb	8b 44 24 38	 mov	 eax, DWORD PTR 8+[esp+48]
  005cf	6a 00		 push	 0
  005d1	83 38 00	 cmp	 DWORD PTR [eax], 0
  005d4	74 04		 je	 SHORT $L48836

; 184  : 
; 185  : 
; 186  : 			// set invert buttons according to channel invert state
; 187  : 			for (i=1; i<=10; i++) {
; 188  : 				if (g_bChInv[i])
; 189  : 					SendMessage( GetDlgItem(hWnd, IDC_CHECK11+(i-1)), BM_SETCHECK, BST_CHECKED, 0 );

  005d6	6a 01		 push	 1

; 190  : 				else

  005d8	eb 02		 jmp	 SHORT $L49763
$L48836:

; 191  : 					SendMessage( GetDlgItem(hWnd, IDC_CHECK11+(i-1)), BM_SETCHECK, BST_UNCHECKED, 0 );

  005da	6a 00		 push	 0
$L49763:
  005dc	68 f1 00 00 00	 push	 241			; 000000f1H
  005e1	55		 push	 ebp
  005e2	56		 push	 esi
  005e3	ff d7		 call	 edi
  005e5	50		 push	 eax
  005e6	ff d3		 call	 ebx
  005e8	8b 54 24 38	 mov	 edx, DWORD PTR 8+[esp+48]
  005ec	83 c2 04	 add	 edx, 4
  005ef	45		 inc	 ebp
  005f0	89 54 24 38	 mov	 DWORD PTR 8+[esp+48], edx
  005f4	8d 8d 64 fb ff
	ff		 lea	 ecx, DWORD PTR [ebp-1180]
  005fa	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  005fd	7e cc		 jle	 SHORT $L48833

; 312  : }

  005ff	bd a7 04 00 00	 mov	 ebp, 1191		; 000004a7H
  00604	b8 01 00 00 00	 mov	 eax, OFFSET FLAT:?g_bChMute@@3PA_NA+1
  00609	2b c5		 sub	 eax, ebp
  0060b	89 44 24 38	 mov	 DWORD PTR 8+[esp+48], eax
  0060f	eb 04		 jmp	 SHORT $L48838
$L49761:

; 192  : 			}
; 193  : 
; 194  : 			// set mute buttons according to channel mute state
; 195  : 			for (i=1; i<=10; i++) {

  00611	8b 44 24 38	 mov	 eax, DWORD PTR 8+[esp+48]
$L48838:

; 196  : 				if (g_bChMute[i])

  00615	8a 4c 05 00	 mov	 cl, BYTE PTR [ebp+eax]

; 197  : 					SendMessage( GetDlgItem(hWnd, IDC_CHECK21+(i-1)), BM_SETCHECK, BST_CHECKED, 0 );

  00619	6a 00		 push	 0
  0061b	84 c9		 test	 cl, cl
  0061d	74 04		 je	 SHORT $L48841
  0061f	6a 01		 push	 1

; 198  : 				else

  00621	eb 02		 jmp	 SHORT $L49764
$L48841:

; 199  : 					SendMessage( GetDlgItem(hWnd, IDC_CHECK21+(i-1)), BM_SETCHECK, BST_UNCHECKED, 0 );

  00623	6a 00		 push	 0
$L49764:
  00625	68 f1 00 00 00	 push	 241			; 000000f1H
  0062a	55		 push	 ebp
  0062b	56		 push	 esi
  0062c	ff d7		 call	 edi
  0062e	50		 push	 eax
  0062f	ff d3		 call	 ebx
  00631	45		 inc	 ebp
  00632	8d 95 5a fb ff
	ff		 lea	 edx, DWORD PTR [ebp-1190]
  00638	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0063b	7e d4		 jle	 SHORT $L49761

; 200  : 			}
; 201  : 
; 202  : 
; 203  : 			// tooltips
; 204  : 			g_hinst = g_hInst;

  0063d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst

; 205  : 			g_hwndDlg = hWnd;	

  00642	89 35 00 00 00
	00		 mov	 DWORD PTR ?g_hwndDlg@@3PAUHWND__@@A, esi ; g_hwndDlg
  00648	a3 00 00 00 00	 mov	 DWORD PTR ?g_hinst@@3PAUHINSTANCE__@@A, eax ; g_hinst

; 206  : 			DoCreateDialogTooltip();

  0064d	e8 00 00 00 00	 call	 ?DoCreateDialogTooltip@@YAHXZ ; DoCreateDialogTooltip

; 309  : 	}
; 310  : 
; 311  : 	return(0);

  00652	33 c0		 xor	 eax, eax

; 312  : }

  00654	5f		 pop	 edi
  00655	5e		 pop	 esi
  00656	5d		 pop	 ebp
  00657	5b		 pop	 ebx
  00658	83 c4 24	 add	 esp, 36			; 00000024H
  0065b	c2 10 00	 ret	 16			; 00000010H
$L48843:

; 207  : 			 
; 208  : 
; 209  : 			break;
; 210  : 		case WM_KEYDOWN: // fuck, why not???
; 211  : 			// because catching key input in dialogs takes special steps
; 212  : 			// see: the froggie apps
; 213  : 			//if (VK_HOME == wParam) {
; 214  : 				  MessageBox(NULL,"qqq!","QQQ!",MB_OK);

  0065e	6a 00		 push	 0
  00660	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PMPB@QQQ?$CB?$AA@ ; `string'
  00665	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MBDE@qqq?$CB?$AA@ ; `string'
  0066a	6a 00		 push	 0
  0066c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
$L48803:

; 312  : }

  00672	5f		 pop	 edi
  00673	5e		 pop	 esi
  00674	5d		 pop	 ebp
  00675	33 c0		 xor	 eax, eax
  00677	5b		 pop	 ebx
  00678	83 c4 24	 add	 esp, 36			; 00000024H
  0067b	c2 10 00	 ret	 16			; 00000010H
  0067e	8b ff		 npad	 2
$L49766:
  00680	00 00 00 00	 DD	 $L48871
  00684	00 00 00 00	 DD	 $L48850
  00688	00 00 00 00	 DD	 $L48856
  0068c	00 00 00 00	 DD	 $L48877
  00690	00 00 00 00	 DD	 $L48878
  00694	00 00 00 00	 DD	 $L48879
  00698	00 00 00 00	 DD	 $L48880
  0069c	00 00 00 00	 DD	 $L48881
  006a0	00 00 00 00	 DD	 $L48882
  006a4	00 00 00 00	 DD	 $L48883
  006a8	00 00 00 00	 DD	 $L48884
  006ac	00 00 00 00	 DD	 $L48885
  006b0	00 00 00 00	 DD	 $L48886
  006b4	00 00 00 00	 DD	 $L48861
  006b8	00 00 00 00	 DD	 $L48862
  006bc	00 00 00 00	 DD	 $L48863
  006c0	00 00 00 00	 DD	 $L48864
  006c4	00 00 00 00	 DD	 $L48865
  006c8	00 00 00 00	 DD	 $L48866
  006cc	00 00 00 00	 DD	 $L48867
  006d0	00 00 00 00	 DD	 $L48868
  006d4	00 00 00 00	 DD	 $L48869
  006d8	00 00 00 00	 DD	 $L48870
  006dc	00 00 00 00	 DD	 $L48847
$L49765:
  006e0	00		 DB	 0
  006e1	17		 DB	 23			; 00000017H
  006e2	17		 DB	 23			; 00000017H
  006e3	17		 DB	 23			; 00000017H
  006e4	17		 DB	 23			; 00000017H
  006e5	01		 DB	 1
  006e6	17		 DB	 23			; 00000017H
  006e7	17		 DB	 23			; 00000017H
  006e8	17		 DB	 23			; 00000017H
  006e9	17		 DB	 23			; 00000017H
  006ea	17		 DB	 23			; 00000017H
  006eb	17		 DB	 23			; 00000017H
  006ec	17		 DB	 23			; 00000017H
  006ed	17		 DB	 23			; 00000017H
  006ee	17		 DB	 23			; 00000017H
  006ef	17		 DB	 23			; 00000017H
  006f0	17		 DB	 23			; 00000017H
  006f1	17		 DB	 23			; 00000017H
  006f2	17		 DB	 23			; 00000017H
  006f3	17		 DB	 23			; 00000017H
  006f4	17		 DB	 23			; 00000017H
  006f5	17		 DB	 23			; 00000017H
  006f6	17		 DB	 23			; 00000017H
  006f7	17		 DB	 23			; 00000017H
  006f8	17		 DB	 23			; 00000017H
  006f9	17		 DB	 23			; 00000017H
  006fa	17		 DB	 23			; 00000017H
  006fb	17		 DB	 23			; 00000017H
  006fc	17		 DB	 23			; 00000017H
  006fd	17		 DB	 23			; 00000017H
  006fe	17		 DB	 23			; 00000017H
  006ff	17		 DB	 23			; 00000017H
  00700	17		 DB	 23			; 00000017H
  00701	17		 DB	 23			; 00000017H
  00702	17		 DB	 23			; 00000017H
  00703	17		 DB	 23			; 00000017H
  00704	17		 DB	 23			; 00000017H
  00705	17		 DB	 23			; 00000017H
  00706	17		 DB	 23			; 00000017H
  00707	17		 DB	 23			; 00000017H
  00708	17		 DB	 23			; 00000017H
  00709	17		 DB	 23			; 00000017H
  0070a	17		 DB	 23			; 00000017H
  0070b	17		 DB	 23			; 00000017H
  0070c	17		 DB	 23			; 00000017H
  0070d	17		 DB	 23			; 00000017H
  0070e	17		 DB	 23			; 00000017H
  0070f	17		 DB	 23			; 00000017H
  00710	17		 DB	 23			; 00000017H
  00711	17		 DB	 23			; 00000017H
  00712	17		 DB	 23			; 00000017H
  00713	17		 DB	 23			; 00000017H
  00714	17		 DB	 23			; 00000017H
  00715	17		 DB	 23			; 00000017H
  00716	17		 DB	 23			; 00000017H
  00717	17		 DB	 23			; 00000017H
  00718	17		 DB	 23			; 00000017H
  00719	17		 DB	 23			; 00000017H
  0071a	17		 DB	 23			; 00000017H
  0071b	17		 DB	 23			; 00000017H
  0071c	17		 DB	 23			; 00000017H
  0071d	17		 DB	 23			; 00000017H
  0071e	17		 DB	 23			; 00000017H
  0071f	17		 DB	 23			; 00000017H
  00720	17		 DB	 23			; 00000017H
  00721	17		 DB	 23			; 00000017H
  00722	17		 DB	 23			; 00000017H
  00723	17		 DB	 23			; 00000017H
  00724	17		 DB	 23			; 00000017H
  00725	17		 DB	 23			; 00000017H
  00726	17		 DB	 23			; 00000017H
  00727	17		 DB	 23			; 00000017H
  00728	17		 DB	 23			; 00000017H
  00729	17		 DB	 23			; 00000017H
  0072a	17		 DB	 23			; 00000017H
  0072b	17		 DB	 23			; 00000017H
  0072c	17		 DB	 23			; 00000017H
  0072d	17		 DB	 23			; 00000017H
  0072e	02		 DB	 2
  0072f	17		 DB	 23			; 00000017H
  00730	17		 DB	 23			; 00000017H
  00731	17		 DB	 23			; 00000017H
  00732	17		 DB	 23			; 00000017H
  00733	17		 DB	 23			; 00000017H
  00734	17		 DB	 23			; 00000017H
  00735	17		 DB	 23			; 00000017H
  00736	17		 DB	 23			; 00000017H
  00737	17		 DB	 23			; 00000017H
  00738	17		 DB	 23			; 00000017H
  00739	17		 DB	 23			; 00000017H
  0073a	17		 DB	 23			; 00000017H
  0073b	17		 DB	 23			; 00000017H
  0073c	17		 DB	 23			; 00000017H
  0073d	17		 DB	 23			; 00000017H
  0073e	17		 DB	 23			; 00000017H
  0073f	17		 DB	 23			; 00000017H
  00740	17		 DB	 23			; 00000017H
  00741	17		 DB	 23			; 00000017H
  00742	03		 DB	 3
  00743	04		 DB	 4
  00744	05		 DB	 5
  00745	06		 DB	 6
  00746	07		 DB	 7
  00747	08		 DB	 8
  00748	09		 DB	 9
  00749	0a		 DB	 10			; 0000000aH
  0074a	0b		 DB	 11			; 0000000bH
  0074b	0c		 DB	 12			; 0000000cH
  0074c	0d		 DB	 13			; 0000000dH
  0074d	0e		 DB	 14			; 0000000eH
  0074e	0f		 DB	 15			; 0000000fH
  0074f	10		 DB	 16			; 00000010H
  00750	11		 DB	 17			; 00000011H
  00751	12		 DB	 18			; 00000012H
  00752	13		 DB	 19			; 00000013H
  00753	14		 DB	 20			; 00000014H
  00754	15		 DB	 21			; 00000015H
  00755	16		 DB	 22			; 00000016H
?Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z ENDP			; Tab2DlgProc
_TEXT	ENDS
PUBLIC	?Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z		; Tab3DlgProc
PUBLIC	?TrackBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar1SubclassProc
PUBLIC	?TrackBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar2SubclassProc
PUBLIC	?TrackBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar3SubclassProc
PUBLIC	?TrackBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar4SubclassProc
PUBLIC	?TrackBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar5SubclassProc
PUBLIC	?TrackBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar6SubclassProc
PUBLIC	?TrackBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar7SubclassProc
PUBLIC	?TrackBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar8SubclassProc
PUBLIC	?TrackBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar9SubclassProc
PUBLIC	?TrackBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z	; TrackBar10SubclassProc
PUBLIC	??_C@_08JMOF@Throttle?$AA@			; `string'
PUBLIC	??_C@_04DLGG@Roll?$AA@				; `string'
PUBLIC	??_C@_04LMAM@Nick?$AA@				; `string'
PUBLIC	??_C@_04NEEI@Tail?$AA@				; `string'
PUBLIC	??_C@_05LDNL@Pitch?$AA@				; `string'
PUBLIC	??_C@_05CJCA@Func6?$AA@				; `string'
PUBLIC	??_C@_05IDLH@Func7?$AA@				; `string'
PUBLIC	??_C@_05ICOK@Func8?$AA@				; `string'
PUBLIC	??_C@_05CIHN@Func9?$AA@				; `string'
PUBLIC	??_C@_06FCOM@Func10?$AA@			; `string'
PUBLIC	??_C@_06PIHL@Func11?$AA@			; `string'
PUBLIC	??_C@_06HMC@Func12?$AA@				; `string'
PUBLIC	??_C@_04NEPN@?$CFi?$CF?$CF?$AA@			; `string'
PUBLIC	??_C@_04FEFO@100?$CF?$AA@			; `string'
PUBLIC	??_C@_01FDHG@?$CK?$AA@				; `string'
EXTRN	__imp__SetDlgItemTextA@12:NEAR
EXTRN	__imp__GetKeyState@4:NEAR
EXTRN	_sprintf:NEAR
EXTRN	?wpOrigTrackBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar1Proc
EXTRN	?wpOrigTrackBar2Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar2Proc
EXTRN	?wpOrigTrackBar3Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar3Proc
EXTRN	?wpOrigTrackBar4Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar4Proc
EXTRN	?wpOrigTrackBar5Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar5Proc
EXTRN	?wpOrigTrackBar6Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar6Proc
EXTRN	?wpOrigTrackBar7Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar7Proc
EXTRN	?wpOrigTrackBar8Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar8Proc
EXTRN	?wpOrigTrackBar9Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar9Proc
EXTRN	?wpOrigTrackBar10Proc@@3P6GJPAUHWND__@@IIJ@ZA:DWORD ; wpOrigTrackBar10Proc
EXTRN	?g_iChSens@@3PAHA:BYTE				; g_iChSens
EXTRN	?g_bShowPercent@@3_NA:BYTE			; g_bShowPercent
EXTRN	?g_bItemFree@@3PA_NA:BYTE			; g_bItemFree
EXTRN	?g_iChMap@@3PAHA:BYTE				; g_iChMap
EXTRN	_strchr:NEAR
;	COMDAT ??_C@_08JMOF@Throttle?$AA@
; File E:\interface\TxintguiSDK\Bigpush\tabdlg.cpp
_DATA	SEGMENT
??_C@_08JMOF@Throttle?$AA@ DB 'Throttle', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DLGG@Roll?$AA@
_DATA	SEGMENT
??_C@_04DLGG@Roll?$AA@ DB 'Roll', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LMAM@Nick?$AA@
_DATA	SEGMENT
??_C@_04LMAM@Nick?$AA@ DB 'Nick', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NEEI@Tail?$AA@
_DATA	SEGMENT
??_C@_04NEEI@Tail?$AA@ DB 'Tail', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LDNL@Pitch?$AA@
_DATA	SEGMENT
??_C@_05LDNL@Pitch?$AA@ DB 'Pitch', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05CJCA@Func6?$AA@
_DATA	SEGMENT
??_C@_05CJCA@Func6?$AA@ DB 'Func6', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05IDLH@Func7?$AA@
_DATA	SEGMENT
??_C@_05IDLH@Func7?$AA@ DB 'Func7', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05ICOK@Func8?$AA@
_DATA	SEGMENT
??_C@_05ICOK@Func8?$AA@ DB 'Func8', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05CIHN@Func9?$AA@
_DATA	SEGMENT
??_C@_05CIHN@Func9?$AA@ DB 'Func9', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06FCOM@Func10?$AA@
_DATA	SEGMENT
??_C@_06FCOM@Func10?$AA@ DB 'Func10', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06PIHL@Func11?$AA@
_DATA	SEGMENT
??_C@_06PIHL@Func11?$AA@ DB 'Func11', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06HMC@Func12?$AA@
_DATA	SEGMENT
??_C@_06HMC@Func12?$AA@ DB 'Func12', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NEPN@?$CFi?$CF?$CF?$AA@
_DATA	SEGMENT
??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ DB '%i%%', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04FEFO@100?$CF?$AA@
_DATA	SEGMENT
??_C@_04FEFO@100?$CF?$AA@ DB '100%', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FDHG@?$CK?$AA@
_DATA	SEGMENT
??_C@_01FDHG@?$CK?$AA@ DB '*', 00H			; `string'
_DATA	ENDS
;	COMDAT ?Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_i$ = -396
_Buffer$ = -388
_sens$48970 = -256
_sens$49080 = -128
_sens$49082 = -256
?Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z PROC NEAR		; Tab3DlgProc, COMDAT

; 323  : 	//int dIndex;
; 324  : 	//PAINTSTRUCT ps;
; 325  : 	int i;
; 326  : 	int idComboBox;
; 327  : 	static int iOldItem = 0;
; 328  : 	static int iNewItem = 0;
; 329  : 
; 330  : 	char Buffer[128];
; 331  : 
; 332  : 	static bool bfirsttime = true;
; 333  : 	int ichannel;
; 334  : 
; 335  : 
; 336  : 	switch(uMsg)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _uMsg$[esp-4]
  00004	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  0000a	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  0000d	53		 push	 ebx
  0000e	55		 push	 ebp
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	77 45		 ja	 SHORT $L49768
  00013	74 24		 je	 SHORT $L49083
  00015	83 e8 02	 sub	 eax, 2
  00018	0f 85 41 04 00
	00		 jne	 $L49068

; 598  : 			break;
; 599  : 		case WM_DESTROY:
; 600  : 			// tooltip unhook, unhook!!!
; 601  : 			UnhookWindowsHookEx(g_hhk);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hhk@@3PAUHHOOK__@@A ; g_hhk
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4

; 605  : 	}
; 606  : 
; 607  : 	return(0);

  0002a	33 c0		 xor	 eax, eax

; 608  : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5d		 pop	 ebp
  0002f	5b		 pop	 ebx
  00030	81 c4 8c 01 00
	00		 add	 esp, 396		; 0000018cH
  00036	c2 10 00	 ret	 16			; 00000010H
$L49083:

; 590  : 						//SetDlgItemText( hWnd, IDC_EDIT1, sens );
; 591  : 					}
; 592  : 				}
; 593  : 			}
; 594  : 			break;
; 595  : 		case WM_NOTIFY:
; 596  : 			// tooltips
; 597  : 			OnWMNotify(lParam);

  00039	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR _lParam$[esp+408]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ?OnWMNotify@@YAXJ@Z	; OnWMNotify
  00046	83 c4 04	 add	 esp, 4

; 605  : 	}
; 606  : 
; 607  : 	return(0);

  00049	33 c0		 xor	 eax, eax

; 608  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	5b		 pop	 ebx
  0004f	81 c4 8c 01 00
	00		 add	 esp, 396		; 0000018cH
  00055	c2 10 00	 ret	 16			; 00000010H
$L49768:

; 323  : 	//int dIndex;
; 324  : 	//PAINTSTRUCT ps;
; 325  : 	int i;
; 326  : 	int idComboBox;
; 327  : 	static int iOldItem = 0;
; 328  : 	static int iNewItem = 0;
; 329  : 
; 330  : 	char Buffer[128];
; 331  : 
; 332  : 	static bool bfirsttime = true;
; 333  : 	int ichannel;
; 334  : 
; 335  : 
; 336  : 	switch(uMsg)

  00058	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  0005d	0f 84 0b 04 00
	00		 je	 $L48909
  00063	48		 dec	 eax
  00064	0f 84 0a 01 00
	00		 je	 $L48999
  0006a	83 e8 03	 sub	 eax, 3
  0006d	74 0f		 je	 SHORT $L49069

; 602  : 			break;
; 603  : 		default:
; 604  : 			return(FALSE);

  0006f	33 c0		 xor	 eax, eax

; 608  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp
  00074	5b		 pop	 ebx
  00075	81 c4 8c 01 00
	00		 add	 esp, 396		; 0000018cH
  0007b	c2 10 00	 ret	 16			; 00000010H
$L49069:

; 545  : 
; 546  : 						
; 547  : 					break;
; 548  : 				/*case CBN_SELCHANGE:
; 549  : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 550  : 					break;*/
; 551  : 				case CBN_SETFOCUS:
; 552  : 					//SetCapture( GetDlgItem(hWnd, IDC_COMBO1) );
; 553  : 					break;
; 554  : 			}
; 555  : 			break;
; 556  : 		/*case WM_PAINT:
; 557  : 			BeginPaint(hWnd, &ps);
; 558  : 
; 559  : 			EndPaint(hWnd, &ps);
; 560  : 			break;*/
; 561  : 		/*case WM_LBUTTONDOWN:
; 562  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 563  : 			POINT pt;
; 564  : 			pt.x = LOWORD(lParam);
; 565  : 			pt.y = HIWORD(lParam);
; 566  : 
; 567  : 			// works only with static controls, not progress bars
; 568  : 			// and works only if static control is not in group box
; 569  : 			if ( ChildWindowFromPoint(hWnd, pt) == GetDlgItem(hWnd, IDC_STATICMAX) ) {
; 570  : 				MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 571  : 			}
; 572  : 			break;*/
; 573  : 		case WM_HSCROLL:			
; 574  : 			for (i=1; i<=10; i++) {

  0007e	8b 9c 24 a0 01
	00 00		 mov	 ebx, DWORD PTR _hWnd$[esp+408]
  00085	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  0008b	be 01 00 00 00	 mov	 esi, 1
$L49070:

; 575  : 				if ( lParam == (LPARAM)GetDlgItem(hWnd, IDC_SLIDER1+(i-1)) ) {

  00090	8d be 23 04 00
	00		 lea	 edi, DWORD PTR [esi+1059]
  00096	57		 push	 edi
  00097	53		 push	 ebx
  00098	ff d5		 call	 ebp
  0009a	39 84 24 ac 01
	00 00		 cmp	 DWORD PTR _lParam$[esp+408], eax
  000a1	0f 85 b4 00 00
	00		 jne	 $L49071

; 576  : 					g_iChSens[i] = SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+(i-1)), TBM_GETPOS, 0, 0 );

  000a7	6a 00		 push	 0
  000a9	6a 00		 push	 0
  000ab	68 00 04 00 00	 push	 1024			; 00000400H
  000b0	57		 push	 edi
  000b1	53		 push	 ebx
  000b2	ff d5		 call	 ebp
  000b4	50		 push	 eax
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000bb	8b f8		 mov	 edi, eax

; 577  : 					int iconnect = g_iChSens[i];
; 578  : 					// pressing Control key while sliding connects all sliders
; 579  : 					if ( GetKeyState(VK_CONTROL) & 0x80 ) {

  000bd	6a 11		 push	 17			; 00000011H
  000bf	89 3c b5 00 00
	00 00		 mov	 DWORD PTR ?g_iChSens@@3PAHA[esi*4], edi
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  000cc	a8 80		 test	 al, -128		; ffffff80H
  000ce	74 58		 je	 SHORT $L49076

; 608  : }

  000d0	be 90 04 00 00	 mov	 esi, 1168		; 00000490H
  000d5	c7 44 24 10 0b
	00 00 00	 mov	 DWORD PTR _i$[esp+412], 11 ; 0000000bH
$L49077:
  000dd	57		 push	 edi
  000de	6a 01		 push	 1
  000e0	8d 56 94	 lea	 edx, DWORD PTR [esi-108]
  000e3	68 05 04 00 00	 push	 1029			; 00000405H
  000e8	52		 push	 edx
  000e9	53		 push	 ebx
  000ea	ff d5		 call	 ebp
  000ec	50		 push	 eax
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000f3	57		 push	 edi
  000f4	8d 84 24 20 01
	00 00		 lea	 eax, DWORD PTR _sens$49080[esp+416]
  000fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ ; `string'
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 _sprintf
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
  00109	8d 8c 24 1c 01
	00 00		 lea	 ecx, DWORD PTR _sens$49080[esp+412]
  00110	51		 push	 ecx
  00111	56		 push	 esi
  00112	53		 push	 ebx
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  00119	46		 inc	 esi
  0011a	81 fe 99 04 00
	00		 cmp	 esi, 1177		; 00000499H
  00120	7e bb		 jle	 SHORT $L49077

; 580  : 						for (i=1; i<=10; i++) {
; 581  : 							SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+(i-1)), TBM_SETPOS, TRUE, iconnect );
; 582  : 							char sens[128];
; 583  : 							sprintf( sens, "%i%%", iconnect);
; 584  : 							SetDlgItemText( hWnd, IDC_STATICSENS1+(i-1), sens );
; 585  : 						}
; 586  : 					} else {

  00122	8b 74 24 10	 mov	 esi, DWORD PTR _i$[esp+412]
  00126	eb 33		 jmp	 SHORT $L49071
$L49076:

; 587  : 						char sens[128];
; 588  : 						sprintf( sens, "%i%%", g_iChSens[i]);

  00128	8b 14 b5 00 00
	00 00		 mov	 edx, DWORD PTR ?g_iChSens@@3PAHA[esi*4]
  0012f	8d 84 24 9c 00
	00 00		 lea	 eax, DWORD PTR _sens$49082[esp+412]
  00136	52		 push	 edx
  00137	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ ; `string'
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 _sprintf
  00142	83 c4 0c	 add	 esp, 12			; 0000000cH

; 589  : 						SetDlgItemText( hWnd, IDC_STATICSENS1+(i-1), sens );

  00145	8d 8c 24 9c 00
	00 00		 lea	 ecx, DWORD PTR _sens$49082[esp+412]
  0014c	8d 96 8f 04 00
	00		 lea	 edx, DWORD PTR [esi+1167]
  00152	51		 push	 ecx
  00153	52		 push	 edx
  00154	53		 push	 ebx
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
$L49071:
  0015b	46		 inc	 esi
  0015c	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0015f	0f 8e 2b ff ff
	ff		 jle	 $L49070

; 605  : 	}
; 606  : 
; 607  : 	return(0);

  00165	33 c0		 xor	 eax, eax

; 608  : }

  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5d		 pop	 ebp
  0016a	5b		 pop	 ebx
  0016b	81 c4 8c 01 00
	00		 add	 esp, 396		; 0000018cH
  00171	c2 10 00	 ret	 16			; 00000010H
$L48999:

; 446  : 
; 447  : 			return TRUE;
; 448  : 			break;
; 449  : 		case WM_COMMAND:
; 450  : 			switch( LOWORD(wParam) )

  00174	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR _wParam$[esp+408]
  0017b	8b bc 24 a0 01
	00 00		 mov	 edi, DWORD PTR _hWnd$[esp+408]
  00182	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00188	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  0018e	8b c1		 mov	 eax, ecx
  00190	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00195	89 44 24 14	 mov	 DWORD PTR -392+[esp+412], eax
  00199	2d 8b 04 00 00	 sub	 eax, 1163		; 0000048bH
  0019e	74 4a		 je	 SHORT $L49005
  001a0	83 e8 28	 sub	 eax, 40			; 00000028H
  001a3	0f 85 96 00 00
	00		 jne	 $L49008

; 454  : 						SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+(i-1)), TBM_SETPOS, (WPARAM)TRUE, (LPARAM)100 );
; 455  : 						g_iChSens[i] = 100;
; 456  : 						SetDlgItemText( hWnd, IDC_STATICSENS1+(i-1), "100%" );
; 457  : 					}
; 458  : 					break;
; 459  : 				case IDC_CHECKPERCENT:
; 460  : 					g_bShowPercent = !g_bShowPercent;

  001a9	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  001af	33 c0		 xor	 eax, eax
  001b1	84 c9		 test	 cl, cl
  001b3	0f 94 c0	 sete	 al
  001b6	a2 00 00 00 00	 mov	 BYTE PTR ?g_bShowPercent@@3_NA, al ; g_bShowPercent

; 608  : }

  001bb	be 90 04 00 00	 mov	 esi, 1168		; 00000490H
  001c0	eb 05		 jmp	 SHORT $L49013
$L49791:
  001c2	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
$L49013:

; 461  : 					for (i=1; i<=10; i++) {
; 462  : 						if (g_bShowPercent)

  001c7	84 c0		 test	 al, al
  001c9	74 04		 je	 SHORT $L49016

; 463  : 							ShowWindow( GetDlgItem(hWnd, IDC_STATICSENS1+(i-1)), TRUE);

  001cb	6a 01		 push	 1

; 464  : 						else

  001cd	eb 02		 jmp	 SHORT $L49796
$L49016:

; 465  : 							ShowWindow( GetDlgItem(hWnd, IDC_STATICSENS1+(i-1)), FALSE);

  001cf	6a 00		 push	 0
$L49796:
  001d1	56		 push	 esi
  001d2	57		 push	 edi
  001d3	ff d5		 call	 ebp
  001d5	50		 push	 eax
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  001dc	46		 inc	 esi
  001dd	8d 86 71 fb ff
	ff		 lea	 eax, DWORD PTR [esi-1167]
  001e3	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001e6	7e da		 jle	 SHORT $L49791

; 466  : 					}
; 467  : 					break;

  001e8	eb 4e		 jmp	 SHORT $L49797
$L49005:

; 608  : }

  001ea	be 90 04 00 00	 mov	 esi, 1168		; 00000490H
  001ef	c7 44 24 10 04
	00 00 00	 mov	 DWORD PTR -396+[esp+412], OFFSET FLAT:?g_iChSens@@3PAHA+4
$L49006:
  001f7	6a 64		 push	 100			; 00000064H
  001f9	6a 01		 push	 1
  001fb	8d 4e 94	 lea	 ecx, DWORD PTR [esi-108]
  001fe	68 05 04 00 00	 push	 1029			; 00000405H
  00203	51		 push	 ecx
  00204	57		 push	 edi
  00205	ff d5		 call	 ebp
  00207	50		 push	 eax
  00208	ff d3		 call	 ebx
  0020a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04FEFO@100?$CF?$AA@ ; `string'
  0020f	56		 push	 esi
  00210	8b 54 24 18	 mov	 edx, DWORD PTR -396+[esp+420]
  00214	57		 push	 edi
  00215	c7 02 64 00 00
	00		 mov	 DWORD PTR [edx], 100	; 00000064H
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  00221	8b 44 24 10	 mov	 eax, DWORD PTR -396+[esp+412]
  00225	83 c0 04	 add	 eax, 4
  00228	46		 inc	 esi
  00229	89 44 24 10	 mov	 DWORD PTR -396+[esp+412], eax
  0022d	8d 86 71 fb ff
	ff		 lea	 eax, DWORD PTR [esi-1167]
  00233	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00236	7e bf		 jle	 SHORT $L49006
$L49797:

; 451  : 			{
; 452  : 				case IDC_BUTTONCENTER:
; 453  : 					for (i=1; i<=10; i++) {

  00238	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR _wParam$[esp+408]
$L49008:

; 468  : 			}
; 469  : 
; 470  : 			switch( HIWORD(wParam) )

  0023f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00242	83 e9 03	 sub	 ecx, 3
  00245	0f 84 14 02 00
	00		 je	 $L49068
  0024b	83 e9 04	 sub	 ecx, 4
  0024e	0f 84 2d 01 00
	00		 je	 $L49024
  00254	83 e9 02	 sub	 ecx, 2
  00257	0f 85 02 02 00
	00		 jne	 $L49068

; 498  : 
; 499  : 		
; 500  : 					break;
; 501  : 				//case CBN_SELCHANGE:
; 502  : 				//case CBN_CLOSEUP:
; 503  : 				case CBN_SELENDOK:
; 504  : 					//SetCapture( hWnd );
; 505  : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 506  : 					idComboBox = (int) LOWORD(wParam);
; 507  : 					iNewItem = SendMessage( (HWND)lParam, CB_GETCURSEL, 0, 0 );

  0025d	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR _lParam$[esp+408]
  00264	6a 00		 push	 0
  00266	6a 00		 push	 0
  00268	68 47 01 00 00	 push	 327			; 00000147H
  0026d	51		 push	 ecx
  0026e	ff d3		 call	 ebx
  00270	8b c8		 mov	 ecx, eax

; 608  : }

  00272	be 1a 04 00 00	 mov	 esi, 1050		; 0000041aH
  00277	89 0d 00 00 00
	00		 mov	 DWORD PTR _?iNewItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48900, ecx
  0027d	c7 44 24 10 04
	00 00 00	 mov	 DWORD PTR -396+[esp+412], OFFSET FLAT:?g_iChMap@@3PAHA+4
$L49053:
  00285	39 74 24 14	 cmp	 DWORD PTR -392+[esp+412], esi
  00289	74 3f		 je	 SHORT $L49054

; 508  : 					Buffer[128];
; 509  : 
; 510  : 					
; 511  : 					// clear the item if it was selected in another combo box
; 512  : 					// and clear that channel mapping
; 513  : 					for (i=1; i<=10; i++) {
; 514  : 						if ( idComboBox != (IDC_COMBO1+(i-1)) && iNewItem != CB_ERR ) {

  0028b	83 f9 ff	 cmp	 ecx, -1
  0028e	74 3a		 je	 SHORT $L49054

; 515  : 	
; 516  : 							if ( iNewItem == SendMessage( GetDlgItem(hWnd, IDC_COMBO1+(i-1)), CB_GETCURSEL, 0, 0 ) ) {

  00290	6a 00		 push	 0
  00292	6a 00		 push	 0
  00294	68 47 01 00 00	 push	 327			; 00000147H
  00299	56		 push	 esi
  0029a	57		 push	 edi
  0029b	ff d5		 call	 ebp
  0029d	50		 push	 eax
  0029e	ff d3		 call	 ebx
  002a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?iNewItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48900
  002a6	3b c8		 cmp	 ecx, eax
  002a8	75 20		 jne	 SHORT $L49054

; 517  : 								SendMessage( GetDlgItem(hWnd, IDC_COMBO1+(i-1)), CB_SETCURSEL, -1, 0 );

  002aa	6a 00		 push	 0
  002ac	6a ff		 push	 -1
  002ae	68 4e 01 00 00	 push	 334			; 0000014eH
  002b3	56		 push	 esi
  002b4	57		 push	 edi
  002b5	ff d5		 call	 ebp
  002b7	50		 push	 eax
  002b8	ff d3		 call	 ebx

; 518  : 								g_iChMap[i] = -1;

  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?iNewItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48900
  002c0	8b 54 24 10	 mov	 edx, DWORD PTR -396+[esp+412]
  002c4	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
$L49054:
  002ca	8b 44 24 10	 mov	 eax, DWORD PTR -396+[esp+412]
  002ce	46		 inc	 esi
  002cf	83 c0 04	 add	 eax, 4
  002d2	89 44 24 10	 mov	 DWORD PTR -396+[esp+412], eax
  002d6	8d 86 e7 fb ff
	ff		 lea	 eax, DWORD PTR [esi-1049]
  002dc	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002df	7e a4		 jle	 SHORT $L49053

; 519  : 							}
; 520  : 						}
; 521  : 					}
; 522  : 
; 523  : 					// get rid of asterisk in this combo box's selection
; 524  : 					if ( iNewItem != CB_ERR ) {

  002e1	83 f9 ff	 cmp	 ecx, -1
  002e4	74 66		 je	 SHORT $L49058

; 525  : 						SendMessage( (HWND)lParam, CB_GETLBTEXT, iNewItem, (LPARAM)&Buffer );

  002e6	8b b4 24 ac 01
	00 00		 mov	 esi, DWORD PTR _lParam$[esp+408]
  002ed	8d 54 24 18	 lea	 edx, DWORD PTR _Buffer$[esp+412]
  002f1	52		 push	 edx
  002f2	51		 push	 ecx
  002f3	68 48 01 00 00	 push	 328			; 00000148H
  002f8	56		 push	 esi
  002f9	ff d3		 call	 ebx

; 526  : 						char* p = strchr(Buffer, '*');

  002fb	8d 44 24 18	 lea	 eax, DWORD PTR _Buffer$[esp+412]
  002ff	6a 2a		 push	 42			; 0000002aH
  00301	50		 push	 eax
  00302	e8 00 00 00 00	 call	 _strchr
  00307	83 c4 08	 add	 esp, 8

; 527  : 						if (p != NULL)

  0030a	85 c0		 test	 eax, eax
  0030c	74 03		 je	 SHORT $L49062

; 528  : 							*p = '\0';

  0030e	c6 00 00	 mov	 BYTE PTR [eax], 0
$L49062:

; 529  : 
; 530  : 						SendMessage( (HWND)lParam, CB_DELETESTRING, iNewItem, 0 );

  00311	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?iNewItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48900
  00317	6a 00		 push	 0
  00319	51		 push	 ecx
  0031a	68 44 01 00 00	 push	 324			; 00000144H
  0031f	56		 push	 esi
  00320	ff d3		 call	 ebx

; 531  : 						SendMessage( (HWND)lParam, CB_INSERTSTRING, iNewItem, (LPARAM)&Buffer );

  00322	a1 00 00 00 00	 mov	 eax, DWORD PTR _?iNewItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48900
  00327	8d 54 24 18	 lea	 edx, DWORD PTR _Buffer$[esp+412]
  0032b	52		 push	 edx
  0032c	50		 push	 eax
  0032d	68 4a 01 00 00	 push	 330			; 0000014aH
  00332	56		 push	 esi
  00333	ff d3		 call	 ebx

; 532  : 						SendMessage( (HWND)lParam, CB_SETCURSEL, iNewItem, 0 );

  00335	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?iNewItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48900
  0033b	6a 00		 push	 0
  0033d	51		 push	 ecx
  0033e	68 4e 01 00 00	 push	 334			; 0000014eH
  00343	56		 push	 esi
  00344	ff d3		 call	 ebx
  00346	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?iNewItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48900
$L49058:

; 533  : 					}
; 534  : 
; 535  : 					// flag new item assigned
; 536  : 					g_bItemFree[iNewItem] = false;
; 537  : 
; 538  : 					// set channel mapping to new item
; 539  : 					ichannel = (idComboBox - IDC_COMBO1)+1;
; 540  : 					g_iChMap[ichannel] = iNewItem;

  0034c	8b 54 24 14	 mov	 edx, DWORD PTR -392+[esp+412]

; 541  : 
; 542  : 					// flag old item free if a new one is chosen
; 543  : 					if ( iNewItem != iOldItem )

  00350	a1 00 00 00 00	 mov	 eax, DWORD PTR _?iOldItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48898
  00355	3b c8		 cmp	 ecx, eax
  00357	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?g_bItemFree@@3PA_NA[ecx], 0
  0035e	89 0c 95 9c ef
	ff ff		 mov	 DWORD PTR ?g_iChMap@@3PAHA[edx*4-4196], ecx
  00365	0f 84 f4 00 00
	00		 je	 $L49068

; 544  : 						g_bItemFree[iOldItem] = true;

  0036b	c6 80 00 00 00
	00 01		 mov	 BYTE PTR ?g_bItemFree@@3PA_NA[eax], 1

; 605  : 	}
; 606  : 
; 607  : 	return(0);

  00372	33 c0		 xor	 eax, eax

; 608  : }

  00374	5f		 pop	 edi
  00375	5e		 pop	 esi
  00376	5d		 pop	 ebp
  00377	5b		 pop	 ebx
  00378	81 c4 8c 01 00
	00		 add	 esp, 396		; 0000018cH
  0037e	c2 10 00	 ret	 16			; 00000010H
$L49024:

; 471  : 			{
; 472  : 				case CBN_DROPDOWN:
; 473  : 					idComboBox = (int) LOWORD(wParam);
; 474  : 					iOldItem = SendMessage( (HWND)lParam, CB_GETCURSEL, 0, 0 );

  00381	8b b4 24 ac 01
	00 00		 mov	 esi, DWORD PTR _lParam$[esp+408]
  00388	6a 00		 push	 0
  0038a	6a 00		 push	 0
  0038c	68 47 01 00 00	 push	 327			; 00000147H
  00391	56		 push	 esi
  00392	ff d3		 call	 ebx
  00394	a3 00 00 00 00	 mov	 DWORD PTR _?iOldItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48898, eax

; 475  : 					Buffer[128];
; 476  : 
; 477  : 					// append an asterisk to the items if already assigned
; 478  : 					// get rid of the asterisk if free
; 479  : 					for (i=0; i<12; i++) {

  00399	33 ed		 xor	 ebp, ebp
$L49028:

; 480  : 						if ( iOldItem != i ) {

  0039b	39 2d 00 00 00
	00		 cmp	 DWORD PTR _?iOldItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48898, ebp
  003a1	0f 84 9d 00 00
	00		 je	 $L49029

; 481  : 							if ( !g_bItemFree[i] ) {

  003a7	8a 85 00 00 00
	00		 mov	 al, BYTE PTR ?g_bItemFree@@3PA_NA[ebp]
  003ad	84 c0		 test	 al, al
  003af	75 56		 jne	 SHORT $L49032

; 482  : 								SendMessage( (HWND)lParam, CB_GETLBTEXT, i, (LPARAM)&Buffer );

  003b1	8d 44 24 18	 lea	 eax, DWORD PTR _Buffer$[esp+412]
  003b5	50		 push	 eax
  003b6	55		 push	 ebp
  003b7	68 48 01 00 00	 push	 328			; 00000148H
  003bc	56		 push	 esi
  003bd	ff d3		 call	 ebx

; 483  : 								if ( !strchr(Buffer, '*') )

  003bf	8d 4c 24 18	 lea	 ecx, DWORD PTR _Buffer$[esp+412]
  003c3	6a 2a		 push	 42			; 0000002aH
  003c5	51		 push	 ecx
  003c6	e8 00 00 00 00	 call	 _strchr
  003cb	83 c4 08	 add	 esp, 8
  003ce	85 c0		 test	 eax, eax
  003d0	75 59		 jne	 SHORT $L49044

; 484  : 									strcat(Buffer, "*");

  003d2	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_01FDHG@?$CK?$AA@ ; `string'
  003d7	83 c9 ff	 or	 ecx, -1
  003da	f2 ae		 repne scasb
  003dc	f7 d1		 not	 ecx
  003de	2b f9		 sub	 edi, ecx
  003e0	8d 54 24 18	 lea	 edx, DWORD PTR _Buffer$[esp+412]
  003e4	8b f7		 mov	 esi, edi
  003e6	8b fa		 mov	 edi, edx
  003e8	8b d1		 mov	 edx, ecx
  003ea	83 c9 ff	 or	 ecx, -1
  003ed	f2 ae		 repne scasb
  003ef	8b ca		 mov	 ecx, edx
  003f1	4f		 dec	 edi
  003f2	c1 e9 02	 shr	 ecx, 2
  003f5	f3 a5		 rep movsd
  003f7	8b ca		 mov	 ecx, edx
  003f9	83 e1 03	 and	 ecx, 3
  003fc	f3 a4		 rep movsb
  003fe	8b b4 24 ac 01
	00 00		 mov	 esi, DWORD PTR _lParam$[esp+408]

; 485  : 								SendMessage( (HWND)lParam, CB_DELETESTRING, i, 0 );
; 486  : 								SendMessage( (HWND)lParam, CB_INSERTSTRING, i, (LPARAM)&Buffer );
; 487  : 							} else {

  00405	eb 24		 jmp	 SHORT $L49044
$L49032:

; 488  : 								SendMessage( (HWND)lParam, CB_GETLBTEXT, i, (LPARAM)&Buffer );

  00407	8d 4c 24 18	 lea	 ecx, DWORD PTR _Buffer$[esp+412]
  0040b	51		 push	 ecx
  0040c	55		 push	 ebp
  0040d	68 48 01 00 00	 push	 328			; 00000148H
  00412	56		 push	 esi
  00413	ff d3		 call	 ebx

; 489  : 								char* p = strchr(Buffer, '*');

  00415	8d 54 24 18	 lea	 edx, DWORD PTR _Buffer$[esp+412]
  00419	6a 2a		 push	 42			; 0000002aH
  0041b	52		 push	 edx
  0041c	e8 00 00 00 00	 call	 _strchr
  00421	83 c4 08	 add	 esp, 8

; 490  : 								if (p != NULL)

  00424	85 c0		 test	 eax, eax
  00426	74 03		 je	 SHORT $L49044

; 491  : 									*p = '\0';

  00428	c6 00 00	 mov	 BYTE PTR [eax], 0
$L49044:

; 492  : 								SendMessage( (HWND)lParam, CB_DELETESTRING, i, 0 );

  0042b	6a 00		 push	 0
  0042d	55		 push	 ebp
  0042e	68 44 01 00 00	 push	 324			; 00000144H
  00433	56		 push	 esi
  00434	ff d3		 call	 ebx

; 493  : 								SendMessage( (HWND)lParam, CB_INSERTSTRING, i, (LPARAM)&Buffer );

  00436	8d 44 24 18	 lea	 eax, DWORD PTR _Buffer$[esp+412]
  0043a	50		 push	 eax
  0043b	55		 push	 ebp
  0043c	68 4a 01 00 00	 push	 330			; 0000014aH
  00441	56		 push	 esi
  00442	ff d3		 call	 ebx
$L49029:
  00444	45		 inc	 ebp
  00445	83 fd 0c	 cmp	 ebp, 12			; 0000000cH
  00448	0f 8c 4d ff ff
	ff		 jl	 $L49028

; 494  : 							}
; 495  : 						}
; 496  : 					}
; 497  : 					SendMessage( (HWND)lParam, CB_SETCURSEL, iOldItem, 0 );

  0044e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _?iOldItem@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4HA$S48898
  00454	6a 00		 push	 0
  00456	51		 push	 ecx
  00457	68 4e 01 00 00	 push	 334			; 0000014eH
  0045c	56		 push	 esi
  0045d	ff d3		 call	 ebx
$L49068:

; 605  : 	}
; 606  : 
; 607  : 	return(0);

  0045f	33 c0		 xor	 eax, eax

; 608  : }

  00461	5f		 pop	 edi
  00462	5e		 pop	 esi
  00463	5d		 pop	 ebp
  00464	5b		 pop	 ebx
  00465	81 c4 8c 01 00
	00		 add	 esp, 396		; 0000018cH
  0046b	c2 10 00	 ret	 16			; 00000010H
$L48909:

; 337  : 	{
; 338  : 		case WM_INITDIALOG:
; 339  : 			TabCenter(hWnd);

  0046e	8b b4 24 a0 01
	00 00		 mov	 esi, DWORD PTR _hWnd$[esp+408]
  00475	56		 push	 esi
  00476	e8 00 00 00 00	 call	 ?TabCenter@@YAXPAUHWND__@@@Z ; TabCenter

; 608  : }

  0047b	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageA@16
  00481	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00487	83 c4 04	 add	 esp, 4
  0048a	bb 1a 04 00 00	 mov	 ebx, 1050		; 0000041aH
$L48910:
  0048f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08JMOF@Throttle?$AA@ ; `string'
  00494	6a 00		 push	 0
  00496	68 43 01 00 00	 push	 323			; 00000143H
  0049b	53		 push	 ebx
  0049c	56		 push	 esi
  0049d	ff d7		 call	 edi
  0049f	50		 push	 eax
  004a0	ff d5		 call	 ebp
  004a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04DLGG@Roll?$AA@ ; `string'
  004a7	6a 00		 push	 0
  004a9	68 43 01 00 00	 push	 323			; 00000143H
  004ae	53		 push	 ebx
  004af	56		 push	 esi
  004b0	ff d7		 call	 edi
  004b2	50		 push	 eax
  004b3	ff d5		 call	 ebp
  004b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04LMAM@Nick?$AA@ ; `string'
  004ba	6a 00		 push	 0
  004bc	68 43 01 00 00	 push	 323			; 00000143H
  004c1	53		 push	 ebx
  004c2	56		 push	 esi
  004c3	ff d7		 call	 edi
  004c5	50		 push	 eax
  004c6	ff d5		 call	 ebp
  004c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04NEEI@Tail?$AA@ ; `string'
  004cd	6a 00		 push	 0
  004cf	68 43 01 00 00	 push	 323			; 00000143H
  004d4	53		 push	 ebx
  004d5	56		 push	 esi
  004d6	ff d7		 call	 edi
  004d8	50		 push	 eax
  004d9	ff d5		 call	 ebp
  004db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05LDNL@Pitch?$AA@ ; `string'
  004e0	6a 00		 push	 0
  004e2	68 43 01 00 00	 push	 323			; 00000143H
  004e7	53		 push	 ebx
  004e8	56		 push	 esi
  004e9	ff d7		 call	 edi
  004eb	50		 push	 eax
  004ec	ff d5		 call	 ebp
  004ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05CJCA@Func6?$AA@ ; `string'
  004f3	6a 00		 push	 0
  004f5	68 43 01 00 00	 push	 323			; 00000143H
  004fa	53		 push	 ebx
  004fb	56		 push	 esi
  004fc	ff d7		 call	 edi
  004fe	50		 push	 eax
  004ff	ff d5		 call	 ebp
  00501	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05IDLH@Func7?$AA@ ; `string'
  00506	6a 00		 push	 0
  00508	68 43 01 00 00	 push	 323			; 00000143H
  0050d	53		 push	 ebx
  0050e	56		 push	 esi
  0050f	ff d7		 call	 edi
  00511	50		 push	 eax
  00512	ff d5		 call	 ebp
  00514	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05ICOK@Func8?$AA@ ; `string'
  00519	6a 00		 push	 0
  0051b	68 43 01 00 00	 push	 323			; 00000143H
  00520	53		 push	 ebx
  00521	56		 push	 esi
  00522	ff d7		 call	 edi
  00524	50		 push	 eax
  00525	ff d5		 call	 ebp
  00527	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05CIHN@Func9?$AA@ ; `string'
  0052c	6a 00		 push	 0
  0052e	68 43 01 00 00	 push	 323			; 00000143H
  00533	53		 push	 ebx
  00534	56		 push	 esi
  00535	ff d7		 call	 edi
  00537	50		 push	 eax
  00538	ff d5		 call	 ebp
  0053a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06FCOM@Func10?$AA@ ; `string'
  0053f	6a 00		 push	 0
  00541	68 43 01 00 00	 push	 323			; 00000143H
  00546	53		 push	 ebx
  00547	56		 push	 esi
  00548	ff d7		 call	 edi
  0054a	50		 push	 eax
  0054b	ff d5		 call	 ebp
  0054d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06PIHL@Func11?$AA@ ; `string'
  00552	6a 00		 push	 0
  00554	68 43 01 00 00	 push	 323			; 00000143H
  00559	53		 push	 ebx
  0055a	56		 push	 esi
  0055b	ff d7		 call	 edi
  0055d	50		 push	 eax
  0055e	ff d5		 call	 ebp
  00560	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06HMC@Func12?$AA@ ; `string'
  00565	6a 00		 push	 0
  00567	68 43 01 00 00	 push	 323			; 00000143H
  0056c	53		 push	 ebx
  0056d	56		 push	 esi
  0056e	ff d7		 call	 edi
  00570	50		 push	 eax
  00571	ff d5		 call	 ebp
  00573	43		 inc	 ebx
  00574	8d 93 e6 fb ff
	ff		 lea	 edx, DWORD PTR [ebx-1050]
  0057a	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0057d	0f 8c 0c ff ff
	ff		 jl	 $L48910
  00583	a0 00 00 00 00	 mov	 al, BYTE PTR _?bfirsttime@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4_NA$S48903
  00588	84 c0		 test	 al, al
  0058a	0f 84 c2 00 00
	00		 je	 $L48949
  00590	6a 00		 push	 0
  00592	6a 00		 push	 0
  00594	68 4e 01 00 00	 push	 334			; 0000014eH
  00599	68 1a 04 00 00	 push	 1050			; 0000041aH
  0059e	56		 push	 esi
  0059f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _?bfirsttime@?1??Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z@4_NA$S48903, 0
  005a6	ff d7		 call	 edi
  005a8	50		 push	 eax
  005a9	ff d5		 call	 ebp
  005ab	6a 00		 push	 0
  005ad	6a 01		 push	 1
  005af	68 4e 01 00 00	 push	 334			; 0000014eH
  005b4	68 1b 04 00 00	 push	 1051			; 0000041bH
  005b9	56		 push	 esi
  005ba	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?g_bItemFree@@3PA_NA, 0
  005c1	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_iChMap@@3PAHA+4, 0
  005cb	ff d7		 call	 edi
  005cd	50		 push	 eax
  005ce	ff d5		 call	 ebp
  005d0	6a 00		 push	 0
  005d2	6a 02		 push	 2
  005d4	68 4e 01 00 00	 push	 334			; 0000014eH
  005d9	68 1c 04 00 00	 push	 1052			; 0000041cH
  005de	56		 push	 esi
  005df	c6 05 01 00 00
	00 00		 mov	 BYTE PTR ?g_bItemFree@@3PA_NA+1, 0
  005e6	c7 05 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_iChMap@@3PAHA+8, 1
  005f0	ff d7		 call	 edi
  005f2	50		 push	 eax
  005f3	ff d5		 call	 ebp
  005f5	6a 00		 push	 0
  005f7	6a 03		 push	 3
  005f9	68 4e 01 00 00	 push	 334			; 0000014eH
  005fe	68 1d 04 00 00	 push	 1053			; 0000041dH
  00603	56		 push	 esi
  00604	c6 05 02 00 00
	00 00		 mov	 BYTE PTR ?g_bItemFree@@3PA_NA+2, 0
  0060b	c7 05 0c 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?g_iChMap@@3PAHA+12, 2
  00615	ff d7		 call	 edi
  00617	50		 push	 eax
  00618	ff d5		 call	 ebp
  0061a	6a 00		 push	 0
  0061c	6a 04		 push	 4
  0061e	68 4e 01 00 00	 push	 334			; 0000014eH
  00623	68 1f 04 00 00	 push	 1055			; 0000041fH
  00628	56		 push	 esi
  00629	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?g_bItemFree@@3PA_NA+3, 0
  00630	c7 05 10 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?g_iChMap@@3PAHA+16, 3
  0063a	ff d7		 call	 edi
  0063c	50		 push	 eax
  0063d	ff d5		 call	 ebp
  0063f	c6 05 04 00 00
	00 00		 mov	 BYTE PTR ?g_bItemFree@@3PA_NA+4, 0
  00646	c7 05 18 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?g_iChMap@@3PAHA+24, 4
  00650	eb 3c		 jmp	 SHORT $L48953
$L48949:

; 340  : 			//SetFocus(hWnd); // no focus to get rid of blue selected first combo box
; 341  : 
; 342  : 			for (i=0; i<10; i++) {
; 343  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Throttle");
; 344  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Roll");
; 345  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Nick");
; 346  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Tail");
; 347  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Pitch");
; 348  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Func6");
; 349  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Func7");
; 350  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Func8");
; 351  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Func9");
; 352  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Func10");
; 353  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Func11");
; 354  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_ADDSTRING, 0, (LPARAM)(LPCSTR)"Func12");
; 355  : 
; 356  : 				//SendMessage( GetDlgItem(hWnd, IDC_COMBO1+i), CB_SETCURSEL, 0, 0);
; 357  : 			}
; 358  : 
; 359  : 			
; 360  : 			// mc-20 specific
; 361  : 			// should only do this the very first time the app starts
; 362  : 			// after that we should read settings from the Registry
; 363  : 			// set combo boxes according to present channel mapping
; 364  : 			if (bfirsttime) {
; 365  : 				bfirsttime = false;
; 366  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO1), CB_SETCURSEL, 0, 0); g_bItemFree[0] = false; g_iChMap[1] = 0;
; 367  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO2), CB_SETCURSEL, 1, 0); g_bItemFree[1] = false; g_iChMap[2] = 1;
; 368  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO3), CB_SETCURSEL, 2, 0); g_bItemFree[2] = false; g_iChMap[3] = 2;
; 369  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO4), CB_SETCURSEL, 3, 0); g_bItemFree[3] = false; g_iChMap[4] = 3;
; 370  : 				SendMessage( GetDlgItem(hWnd, IDC_COMBO6), CB_SETCURSEL, 4, 0); g_bItemFree[4] = false; g_iChMap[6] = 4;
; 371  : 			} else {
; 372  : 				for (i=1; i<=10; i++) {

  00652	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _i$[esp+412], 1

; 608  : }

  0065a	bb 04 00 00 00	 mov	 ebx, OFFSET FLAT:?g_iChMap@@3PAHA+4
$L48951:
  0065f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00661	8b 4c 24 10	 mov	 ecx, DWORD PTR _i$[esp+412]
  00665	6a 00		 push	 0
  00667	50		 push	 eax
  00668	81 c1 19 04 00
	00		 add	 ecx, 1049		; 00000419H
  0066e	68 4e 01 00 00	 push	 334			; 0000014eH
  00673	51		 push	 ecx
  00674	56		 push	 esi
  00675	ff d7		 call	 edi
  00677	50		 push	 eax
  00678	ff d5		 call	 ebp
  0067a	83 c3 04	 add	 ebx, 4
  0067d	8b 54 24 10	 mov	 edx, DWORD PTR _i$[esp+412]
  00681	42		 inc	 edx
  00682	81 fb 28 00 00
	00		 cmp	 ebx, OFFSET FLAT:?g_iChMap@@3PAHA+40
  00688	89 54 24 10	 mov	 DWORD PTR _i$[esp+412], edx
  0068c	7e d1		 jle	 SHORT $L48951
$L48953:

; 373  : 					SendMessage( GetDlgItem(hWnd, IDC_COMBO1+(i-1)), CB_SETCURSEL, g_iChMap[i], 0 );
; 374  : 				}
; 375  : 			}
; 376  : 			
; 377  : /*			
; 378  : 			dIndex = ComboBox_AddString( GetDlgItem(hWnd, IDC_COMBO1), "Pitch" );
; 379  : 			//ComboBox_SetTopIndex( GetDlgItem(hWnd, IDC_COMBO1), dIndex );
; 380  : 			//SendMessage( GetDlgItem(hWnd, IDC_COMBO1), CB_SETTOPINDEX, dIndex, 0);
; 381  : 			//SendMessage( GetDlgItem(hWnd, IDC_COMBO1), CB_SETITEMDATA, dIndex, ID_PITCH);
; 382  : 
; 383  : 			dIndex = ComboBox_AddString( GetDlgItem(hWnd, IDC_COMBO1), "Roll");
; 384  : 			dIndex = ComboBox_AddString( GetDlgItem(hWnd, IDC_COMBO1), "Nick");
; 385  : 			dIndex = ComboBox_AddString( GetDlgItem(hWnd, IDC_COMBO1), "Tail");
; 386  : 			dIndex = ComboBox_AddString( GetDlgItem(hWnd, IDC_COMBO1), "Throttle");
; 387  : */
; 388  : 
; 389  : 			// track bar stuff
; 390  : 			for (i=0; i<10; i++) {

  0068e	bb 24 04 00 00	 mov	 ebx, 1060		; 00000424H
$L48954:

; 391  : 				SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+i), TBM_SETRANGE, (WPARAM)TRUE, (LPARAM)MAKELONG(0, 200) );  

  00693	68 00 00 c8 00	 push	 13107200		; 00c80000H
  00698	6a 01		 push	 1
  0069a	68 06 04 00 00	 push	 1030			; 00000406H
  0069f	53		 push	 ebx
  006a0	56		 push	 esi
  006a1	ff d7		 call	 edi
  006a3	50		 push	 eax
  006a4	ff d5		 call	 ebp

; 392  : 				SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+i), TBM_SETPOS, (WPARAM)TRUE, (LPARAM)100 );

  006a6	6a 64		 push	 100			; 00000064H
  006a8	6a 01		 push	 1
  006aa	68 05 04 00 00	 push	 1029			; 00000405H
  006af	53		 push	 ebx
  006b0	56		 push	 esi
  006b1	ff d7		 call	 edi
  006b3	50		 push	 eax
  006b4	ff d5		 call	 ebp
  006b6	43		 inc	 ebx
  006b7	8d 93 dc fb ff
	ff		 lea	 edx, DWORD PTR [ebx-1060]
  006bd	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  006c0	7c d1		 jl	 SHORT $L48954

; 608  : }

  006c2	bb 90 04 00 00	 mov	 ebx, 1168		; 00000490H
  006c7	c7 44 24 10 04
	00 00 00	 mov	 DWORD PTR -396+[esp+412], OFFSET FLAT:?g_iChSens@@3PAHA+4
$L48965:
  006cf	8b 44 24 10	 mov	 eax, DWORD PTR -396+[esp+412]
  006d3	8d 53 94	 lea	 edx, DWORD PTR [ebx-108]
  006d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  006d8	51		 push	 ecx
  006d9	6a 01		 push	 1
  006db	68 05 04 00 00	 push	 1029			; 00000405H
  006e0	52		 push	 edx
  006e1	56		 push	 esi
  006e2	ff d7		 call	 edi
  006e4	50		 push	 eax
  006e5	ff d5		 call	 ebp
  006e7	8d 94 24 9c 00
	00 00		 lea	 edx, DWORD PTR _sens$48970[esp+412]
  006ee	8b 44 24 10	 mov	 eax, DWORD PTR -396+[esp+412]
  006f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f4	51		 push	 ecx
  006f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ ; `string'
  006fa	52		 push	 edx
  006fb	e8 00 00 00 00	 call	 _sprintf
  00700	83 c4 0c	 add	 esp, 12			; 0000000cH
  00703	8d 84 24 9c 00
	00 00		 lea	 eax, DWORD PTR _sens$48970[esp+412]
  0070a	50		 push	 eax
  0070b	53		 push	 ebx
  0070c	56		 push	 esi
  0070d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  00713	8b 54 24 10	 mov	 edx, DWORD PTR -396+[esp+412]
  00717	83 c2 04	 add	 edx, 4
  0071a	43		 inc	 ebx
  0071b	89 54 24 10	 mov	 DWORD PTR -396+[esp+412], edx
  0071f	8d 8b 71 fb ff
	ff		 lea	 ecx, DWORD PTR [ebx-1167]
  00725	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00728	7e a5		 jle	 SHORT $L48965
  0072a	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  0072f	6a 00		 push	 0
  00731	84 c0		 test	 al, al
  00733	74 04		 je	 SHORT $L48972

; 393  : 				
; 394  : 				//SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+i), TBM_SETTIC, (WPARAM)0, (LPARAM)(LONG)0 );
; 395  : 				//SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+i), TBM_SETTIC, (WPARAM)0, (LPARAM)(LONG)100 );
; 396  : 				//SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+i), TBM_SETTIC, (WPARAM)0, (LPARAM)(LONG)200 );
; 397  : 			}
; 398  : 
; 399  : 			
; 400  : 			// should only do this the very first time the app starts
; 401  : 			// after that we should read settings from the Registry
; 402  : 			// set track bar position according to channel sensitivity
; 403  : 			// and set percentage
; 404  : 			for (i=1; i<=10; i++) {
; 405  : 				SendMessage( GetDlgItem(hWnd, IDC_SLIDER1+(i-1)), TBM_SETPOS, (WPARAM)TRUE, (LPARAM)g_iChSens[i] );
; 406  : 
; 407  : 				char sens[128];
; 408  : 				sprintf( sens, "%i%%", g_iChSens[i]);
; 409  : 				SetDlgItemText( hWnd, IDC_STATICSENS1+(i-1), sens );
; 410  : 			}
; 411  : 
; 412  : 			
; 413  : 			// set percent check button
; 414  : 			if (g_bShowPercent)
; 415  : 				SendMessage( GetDlgItem(hWnd, IDC_CHECKPERCENT), BM_SETCHECK, BST_CHECKED, 0 );

  00735	6a 01		 push	 1

; 416  : 			else

  00737	eb 02		 jmp	 SHORT $L49798
$L48972:

; 417  : 				SendMessage( GetDlgItem(hWnd, IDC_CHECKPERCENT), BM_SETCHECK, BST_UNCHECKED, 0 );

  00739	6a 00		 push	 0
$L49798:
  0073b	68 f1 00 00 00	 push	 241			; 000000f1H
  00740	68 b3 04 00 00	 push	 1203			; 000004b3H
  00745	56		 push	 esi
  00746	ff d7		 call	 edi
  00748	50		 push	 eax
  00749	ff d5		 call	 ebp

; 418  : 
; 419  : 
; 420  : 			// set percent static text
; 421  : 			for (i=1; i<=10; i++) {

  0074b	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__ShowWindow@8
  00751	bb 90 04 00 00	 mov	 ebx, 1168		; 00000490H
$L48974:

; 422  : 				if (g_bShowPercent)

  00756	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  0075b	84 c0		 test	 al, al
  0075d	74 04		 je	 SHORT $L48977

; 423  : 					ShowWindow( GetDlgItem(hWnd, IDC_STATICSENS1+(i-1)), TRUE);

  0075f	6a 01		 push	 1

; 424  : 				else

  00761	eb 02		 jmp	 SHORT $L49799
$L48977:

; 425  : 					ShowWindow( GetDlgItem(hWnd, IDC_STATICSENS1+(i-1)), FALSE);

  00763	6a 00		 push	 0
$L49799:
  00765	53		 push	 ebx
  00766	56		 push	 esi
  00767	ff d7		 call	 edi
  00769	50		 push	 eax
  0076a	ff d5		 call	 ebp
  0076c	43		 inc	 ebx
  0076d	8d 93 71 fb ff
	ff		 lea	 edx, DWORD PTR [ebx-1167]
  00773	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00776	7e de		 jle	 SHORT $L48974

; 426  : 			}
; 427  : 
; 428  : 
; 429  : 			// subclass 'em
; 430  : 			wpOrigTrackBar1Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER1), GWL_WNDPROC, (LONG)TrackBar1SubclassProc );

  00778	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar1SubclassProc
  0077d	6a fc		 push	 -4			; fffffffcH
  0077f	68 24 04 00 00	 push	 1060			; 00000424H
  00784	56		 push	 esi
  00785	ff d7		 call	 edi
  00787	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowLongA@12
  0078d	50		 push	 eax
  0078e	ff d3		 call	 ebx

; 431  : 			wpOrigTrackBar2Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER2), GWL_WNDPROC, (LONG)TrackBar2SubclassProc );

  00790	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar2SubclassProc
  00795	6a fc		 push	 -4			; fffffffcH
  00797	68 25 04 00 00	 push	 1061			; 00000425H
  0079c	56		 push	 esi
  0079d	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar1Proc
  007a2	ff d7		 call	 edi
  007a4	50		 push	 eax
  007a5	ff d3		 call	 ebx

; 432  : 			wpOrigTrackBar3Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER3), GWL_WNDPROC, (LONG)TrackBar3SubclassProc );

  007a7	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar3SubclassProc
  007ac	6a fc		 push	 -4			; fffffffcH
  007ae	68 26 04 00 00	 push	 1062			; 00000426H
  007b3	56		 push	 esi
  007b4	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar2Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar2Proc
  007b9	ff d7		 call	 edi
  007bb	50		 push	 eax
  007bc	ff d3		 call	 ebx

; 433  : 			wpOrigTrackBar4Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER4), GWL_WNDPROC, (LONG)TrackBar4SubclassProc );

  007be	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar4SubclassProc
  007c3	6a fc		 push	 -4			; fffffffcH
  007c5	68 27 04 00 00	 push	 1063			; 00000427H
  007ca	56		 push	 esi
  007cb	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar3Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar3Proc
  007d0	ff d7		 call	 edi
  007d2	50		 push	 eax
  007d3	ff d3		 call	 ebx

; 434  : 			wpOrigTrackBar5Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER5), GWL_WNDPROC, (LONG)TrackBar5SubclassProc );

  007d5	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar5SubclassProc
  007da	6a fc		 push	 -4			; fffffffcH
  007dc	68 28 04 00 00	 push	 1064			; 00000428H
  007e1	56		 push	 esi
  007e2	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar4Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar4Proc
  007e7	ff d7		 call	 edi
  007e9	50		 push	 eax
  007ea	ff d3		 call	 ebx

; 435  : 			wpOrigTrackBar6Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER6), GWL_WNDPROC, (LONG)TrackBar6SubclassProc );

  007ec	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar6SubclassProc
  007f1	6a fc		 push	 -4			; fffffffcH
  007f3	68 29 04 00 00	 push	 1065			; 00000429H
  007f8	56		 push	 esi
  007f9	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar5Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar5Proc
  007fe	ff d7		 call	 edi
  00800	50		 push	 eax
  00801	ff d3		 call	 ebx

; 436  : 			wpOrigTrackBar7Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER7), GWL_WNDPROC, (LONG)TrackBar7SubclassProc );

  00803	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar7SubclassProc
  00808	6a fc		 push	 -4			; fffffffcH
  0080a	68 2a 04 00 00	 push	 1066			; 0000042aH
  0080f	56		 push	 esi
  00810	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar6Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar6Proc
  00815	ff d7		 call	 edi
  00817	50		 push	 eax
  00818	ff d3		 call	 ebx

; 437  : 			wpOrigTrackBar8Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER8), GWL_WNDPROC, (LONG)TrackBar8SubclassProc );

  0081a	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar8SubclassProc
  0081f	6a fc		 push	 -4			; fffffffcH
  00821	68 2b 04 00 00	 push	 1067			; 0000042bH
  00826	56		 push	 esi
  00827	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar7Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar7Proc
  0082c	ff d7		 call	 edi
  0082e	50		 push	 eax
  0082f	ff d3		 call	 ebx

; 438  : 			wpOrigTrackBar9Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER9), GWL_WNDPROC, (LONG)TrackBar9SubclassProc );

  00831	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar9SubclassProc
  00836	6a fc		 push	 -4			; fffffffcH
  00838	68 2c 04 00 00	 push	 1068			; 0000042cH
  0083d	56		 push	 esi
  0083e	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar8Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar8Proc
  00843	ff d7		 call	 edi
  00845	50		 push	 eax
  00846	ff d3		 call	 ebx

; 439  : 			wpOrigTrackBar10Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_SLIDER10), GWL_WNDPROC, (LONG)TrackBar10SubclassProc );

  00848	68 00 00 00 00	 push	 OFFSET FLAT:?TrackBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z ; TrackBar10SubclassProc
  0084d	6a fc		 push	 -4			; fffffffcH
  0084f	68 2d 04 00 00	 push	 1069			; 0000042dH
  00854	56		 push	 esi
  00855	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar9Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar9Proc
  0085a	ff d7		 call	 edi
  0085c	50		 push	 eax
  0085d	ff d3		 call	 ebx
  0085f	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigTrackBar10Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigTrackBar10Proc

; 440  : 			
; 441  : 			
; 442  : 			// tooltips
; 443  : 			g_hinst = g_hInst;

  00864	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst

; 444  : 			g_hwndDlg = hWnd;	

  00869	89 35 00 00 00
	00		 mov	 DWORD PTR ?g_hwndDlg@@3PAUHWND__@@A, esi ; g_hwndDlg
  0086f	a3 00 00 00 00	 mov	 DWORD PTR ?g_hinst@@3PAUHINSTANCE__@@A, eax ; g_hinst

; 445  : 			DoCreateDialogTooltip();

  00874	e8 00 00 00 00	 call	 ?DoCreateDialogTooltip@@YAHXZ ; DoCreateDialogTooltip

; 608  : }

  00879	5f		 pop	 edi
  0087a	5e		 pop	 esi
  0087b	5d		 pop	 ebp
  0087c	b8 01 00 00 00	 mov	 eax, 1
  00881	5b		 pop	 ebx
  00882	81 c4 8c 01 00
	00		 add	 esp, 396		; 0000018cH
  00888	c2 10 00	 ret	 16			; 00000010H
?Tab3DlgProc@@YGHPAUHWND__@@IIJ@Z ENDP			; Tab3DlgProc
_TEXT	ENDS
PUBLIC	?Tab4DlgProc@@YGHPAUHWND__@@IIJ@Z		; Tab4DlgProc
;	COMDAT ?Tab4DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
?Tab4DlgProc@@YGHPAUHWND__@@IIJ@Z PROC NEAR		; Tab4DlgProc, COMDAT

; 620  :   switch(uMsg)

  00000	81 7c 24 08 10
	01 00 00	 cmp	 DWORD PTR _uMsg$[esp-4], 272 ; 00000110H

; 621  :   {
; 622  :       case WM_INITDIALOG:
; 623  :           TabCenter(hWnd);
; 624  : 		  break;
; 625  :  
; 626  :       default:
; 627  :           return(FALSE);

  00008	75 0d		 jne	 SHORT $L49801
  0000a	8b 44 24 04	 mov	 eax, DWORD PTR _hWnd$[esp-4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?TabCenter@@YAXPAUHWND__@@@Z ; TabCenter
  00014	83 c4 04	 add	 esp, 4
$L49801:

; 628  :   }
; 629  :  
; 630  :   return(0);

  00017	33 c0		 xor	 eax, eax

; 631  : }

  00019	c2 10 00	 ret	 16			; 00000010H
?Tab4DlgProc@@YGHPAUHWND__@@IIJ@Z ENDP			; Tab4DlgProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??Tab5DlgProc@@YGHPAUHWND__@@IIJ@Z@4PAKA$S49106 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?Tab5DlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_cc$ = -36
?Tab5DlgProc@@YGHPAUHWND__@@IIJ@Z PROC NEAR		; Tab5DlgProc, COMDAT

; 640  : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 641  : 	HICON hIcon;
; 642  : 	int i;
; 643  : 
; 644  : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 645  : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 646  : 	//HWND hwnd;                      // owner window
; 647  : 	//HBRUSH hbrush;                  // brush handle
; 648  : 	//static DWORD rgbCurrent;        // initial color selection
; 649  : 	
; 650  : 	// Initialize CHOOSECOLOR 
; 651  : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 652  : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 653  : 	cc.hwndOwner = hWnd;

  00005	8b 74 24 30	 mov	 esi, DWORD PTR _hWnd$[esp+40]
  00009	57		 push	 edi
  0000a	b9 09 00 00 00	 mov	 ecx, 9
  0000f	33 c0		 xor	 eax, eax
  00011	8d 7c 24 0c	 lea	 edi, DWORD PTR _cc$[esp+48]
  00015	f3 ab		 rep stosd

; 654  : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 655  : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 656  : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 657  : 
; 658  : 
; 659  : 
; 660  : 	switch(uMsg)

  00017	8b 44 24 38	 mov	 eax, DWORD PTR _uMsg$[esp+44]
  0001b	c7 44 24 0c 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+48], 36 ; 00000024H
  00023	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00026	89 74 24 10	 mov	 DWORD PTR _cc$[esp+52], esi
  0002a	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+64], OFFSET FLAT:_?acrCustClr@?1??Tab5DlgProc@@YGHPAUHWND__@@IIJ@Z@4PAKA$S49106
  00032	c7 44 24 18 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+60], 16711680 ; 00ff0000H
  0003a	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], 1
  00042	77 3a		 ja	 SHORT $L49803
  00044	74 20		 je	 SHORT $L49163
  00046	83 e8 02	 sub	 eax, 2
  00049	0f 85 19 02 00
	00		 jne	 $L49117

; 730  : 			break;
; 731  : 		case WM_DESTROY:
; 732  : 			// tooltips unhook, unhook!!!
; 733  : 			UnhookWindowsHookEx(g_hhk);

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hhk@@3PAUHHOOK__@@A ; g_hhk
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhookWindowsHookEx@4

; 737  :   }
; 738  :  
; 739  :   return(0);

  0005b	33 c0		 xor	 eax, eax

; 740  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	83 c4 24	 add	 esp, 36			; 00000024H
  00063	c2 10 00	 ret	 16			; 00000010H
$L49163:

; 723  : 					}
; 724  : 					break;
; 725  : 			}
; 726  : 			break;
; 727  : 		case WM_NOTIFY:
; 728  : 			// tooltips
; 729  : 			OnWMNotify(lParam);

  00066	8b 4c 24 40	 mov	 ecx, DWORD PTR _lParam$[esp+44]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ?OnWMNotify@@YAXJ@Z	; OnWMNotify
  00070	83 c4 04	 add	 esp, 4

; 737  :   }
; 738  :  
; 739  :   return(0);

  00073	33 c0		 xor	 eax, eax

; 740  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	83 c4 24	 add	 esp, 36			; 00000024H
  0007b	c2 10 00	 ret	 16			; 00000010H
$L49803:

; 654  : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 655  : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 656  : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 657  : 
; 658  : 
; 659  : 
; 660  : 	switch(uMsg)

  0007e	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  00083	0f 84 9f 00 00
	00		 je	 $L49120
  00089	48		 dec	 eax

; 734  : 			break; 
; 735  : 		default:
; 736  : 			return(FALSE);

  0008a	0f 85 d8 01 00
	00		 jne	 $L49117
  00090	8b 44 24 3c	 mov	 eax, DWORD PTR _wParam$[esp+44]
  00094	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00099	2d 46 04 00 00	 sub	 eax, 1094		; 00000446H
  0009e	74 3c		 je	 SHORT $L49152

; 702  : 
; 703  : 			break;
; 704  : 		case WM_COMMAND:
; 705  : 			switch( LOWORD(wParam) )

  000a0	83 e8 43	 sub	 eax, 67			; 00000043H
  000a3	0f 85 bf 01 00
	00		 jne	 $L49117

; 713  : 					break;
; 714  : 				case IDC_BUTTONCOLOR:
; 715  : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 716  : 					if (ChooseColor(&cc)==TRUE) {

  000a9	8d 54 24 0c	 lea	 edx, DWORD PTR _cc$[esp+48]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 _ChooseColorA@4
  000b3	83 f8 01	 cmp	 eax, 1
  000b6	0f 85 ac 01 00
	00		 jne	 $L49117

; 717  : 						//hbrush = CreateSolidBrush(cc.rgbResult);
; 718  : 						//COLOUR_BAR = cc.rgbResult;
; 719  : 						for (i=1; i<=10; i++) {
; 720  : 							g_crColorBar[i] = cc.rgbResult;

  000bc	8b 44 24 18	 mov	 eax, DWORD PTR _cc$[esp+60]
  000c0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000c5	bf 04 00 00 00	 mov	 edi, OFFSET FLAT:?g_crColorBar@@3PAKA+4

; 721  : 						}
; 722  : 						COLOR_CONNECTED = cc.rgbResult;

  000ca	a3 00 00 00 00	 mov	 DWORD PTR ?COLOR_CONNECTED@@3KA, eax ; COLOR_CONNECTED
  000cf	f3 ab		 rep stosd

; 737  :   }
; 738  :  
; 739  :   return(0);

  000d1	33 c0		 xor	 eax, eax

; 740  : }

  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	83 c4 24	 add	 esp, 36			; 00000024H
  000d9	c2 10 00	 ret	 16			; 00000010H
$L49152:

; 706  : 			{
; 707  : 				case IDC_BUTTONVERTICAL:
; 708  : 					if (g_hTabCurrent != NULL)

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  000e1	85 c0		 test	 eax, eax
  000e3	74 07		 je	 SHORT $L49153

; 709  : 						DestroyWindow(g_hTabCurrent);

  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$L49153:

; 710  : 					g_hTabCurrent = CreateDialog(g_hInst,MAKEINTRESOURCE(IDD_DIALOG2),g_hWnd,(DLGPROC)Tab2DlgProc); 

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hWnd@@3PAUHWND__@@A ; g_hWnd
  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
  000f7	6a 00		 push	 0
  000f9	68 00 00 00 00	 push	 OFFSET FLAT:?Tab2DlgProc@@YGHPAUHWND__@@IIJ@Z ; Tab2DlgProc
  000fe	50		 push	 eax
  000ff	6a 6d		 push	 109			; 0000006dH
  00101	51		 push	 ecx
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamA@20

; 711  : 					ShowWindow(g_hTabCurrent, SW_SHOW);

  00108	6a 05		 push	 5
  0010a	50		 push	 eax
  0010b	a3 00 00 00 00	 mov	 DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A, eax ; g_hTabCurrent
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 712  : 					g_bHorizontal = false;

  00116	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?g_bHorizontal@@3_NA, 0 ; g_bHorizontal

; 737  :   }
; 738  :  
; 739  :   return(0);

  0011d	33 c0		 xor	 eax, eax

; 740  : }

  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	83 c4 24	 add	 esp, 36			; 00000024H
  00125	c2 10 00	 ret	 16			; 00000010H
$L49120:

; 661  : 	{
; 662  : 		case WM_INITDIALOG:
; 663  : 			TabCenter(hWnd);

  00128	56		 push	 esi
  00129	e8 00 00 00 00	 call	 ?TabCenter@@YAXPAUHWND__@@@Z ; TabCenter
  0012e	83 c4 04	 add	 esp, 4

; 664  : 			SetFocus(hWnd);

  00131	56		 push	 esi
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 665  : 
; 666  : 			// better not do this
; 667  : 			/*
; 668  : 			if (ChannelTotal != 0) {
; 669  : 				// disable all windows higher than ChannelTotal
; 670  : 				// we'll only do this if Signal Connected
; 671  : 				// gotta make sure controls have consecutive IDs
; 672  : 				for (int i=10; i>ChannelTotal; i--) {
; 673  : 					EnableWindow( GetDlgItem(hWnd, (IDC_PROGRESSHORZ1-1)+i), FALSE);
; 674  : 					EnableWindow( GetDlgItem(hWnd, (IDC_STATICCH1-1)+i), FALSE);
; 675  : 					EnableWindow( GetDlgItem(hWnd, (IDC_STATIC1-1)+i), FALSE);
; 676  : 				}
; 677  : 			}
; 678  : 			*/
; 679  : 
; 680  : 			hIcon = LoadIcon( g_hInst, (LPCSTR)MAKEINTRESOURCE(IDI_ICON2) );

  00138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
  0013e	68 8f 00 00 00	 push	 143			; 0000008fH
  00143	52		 push	 edx
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8

; 681  : 			SendMessage( GetDlgItem(hWnd, IDC_BUTTONCOLOR), BM_SETIMAGE, IMAGE_ICON, (LPARAM)hIcon );

  0014a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00150	50		 push	 eax
  00151	6a 01		 push	 1
  00153	68 f7 00 00 00	 push	 247			; 000000f7H
  00158	68 89 04 00 00	 push	 1161			; 00000489H
  0015d	56		 push	 esi
  0015e	ff d7		 call	 edi
  00160	50		 push	 eax
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 682  : 
; 683  : 			// Subclass the progress bar control
; 684  : 			// This allows is to catch mouse clicks in the progress bar window
; 685  : 			// We can then initiate a color dialog for setting the bar's color
; 686  : 			wpOrigProgressBar1Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ1), GWL_WNDPROC, (LONG)ProgressBar1SubclassProc );

  00167	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar1SubclassProc
  0016c	6a fc		 push	 -4			; fffffffcH
  0016e	68 e9 03 00 00	 push	 1001			; 000003e9H
  00173	56		 push	 esi
  00174	ff d7		 call	 edi
  00176	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowLongA@12
  0017c	50		 push	 eax
  0017d	ff d3		 call	 ebx

; 687  : 			wpOrigProgressBar2Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ2), GWL_WNDPROC, (LONG)ProgressBar2SubclassProc );

  0017f	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar2SubclassProc
  00184	6a fc		 push	 -4			; fffffffcH
  00186	68 ea 03 00 00	 push	 1002			; 000003eaH
  0018b	56		 push	 esi
  0018c	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar1Proc
  00191	ff d7		 call	 edi
  00193	50		 push	 eax
  00194	ff d3		 call	 ebx

; 688  : 			wpOrigProgressBar3Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ3), GWL_WNDPROC, (LONG)ProgressBar3SubclassProc );

  00196	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar3SubclassProc
  0019b	6a fc		 push	 -4			; fffffffcH
  0019d	68 eb 03 00 00	 push	 1003			; 000003ebH
  001a2	56		 push	 esi
  001a3	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar2Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar2Proc
  001a8	ff d7		 call	 edi
  001aa	50		 push	 eax
  001ab	ff d3		 call	 ebx

; 689  : 			wpOrigProgressBar4Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ4), GWL_WNDPROC, (LONG)ProgressBar4SubclassProc );

  001ad	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar4SubclassProc
  001b2	6a fc		 push	 -4			; fffffffcH
  001b4	68 ec 03 00 00	 push	 1004			; 000003ecH
  001b9	56		 push	 esi
  001ba	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar3Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar3Proc
  001bf	ff d7		 call	 edi
  001c1	50		 push	 eax
  001c2	ff d3		 call	 ebx

; 690  : 			wpOrigProgressBar5Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ5), GWL_WNDPROC, (LONG)ProgressBar5SubclassProc );

  001c4	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar5SubclassProc
  001c9	6a fc		 push	 -4			; fffffffcH
  001cb	68 ed 03 00 00	 push	 1005			; 000003edH
  001d0	56		 push	 esi
  001d1	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar4Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar4Proc
  001d6	ff d7		 call	 edi
  001d8	50		 push	 eax
  001d9	ff d3		 call	 ebx

; 691  : 			wpOrigProgressBar6Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ6), GWL_WNDPROC, (LONG)ProgressBar6SubclassProc );

  001db	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar6SubclassProc
  001e0	6a fc		 push	 -4			; fffffffcH
  001e2	68 ee 03 00 00	 push	 1006			; 000003eeH
  001e7	56		 push	 esi
  001e8	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar5Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar5Proc
  001ed	ff d7		 call	 edi
  001ef	50		 push	 eax
  001f0	ff d3		 call	 ebx

; 692  : 			wpOrigProgressBar7Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ7), GWL_WNDPROC, (LONG)ProgressBar7SubclassProc );

  001f2	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar7SubclassProc
  001f7	6a fc		 push	 -4			; fffffffcH
  001f9	68 ef 03 00 00	 push	 1007			; 000003efH
  001fe	56		 push	 esi
  001ff	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar6Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar6Proc
  00204	ff d7		 call	 edi
  00206	50		 push	 eax
  00207	ff d3		 call	 ebx

; 693  : 			wpOrigProgressBar8Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ8), GWL_WNDPROC, (LONG)ProgressBar8SubclassProc );

  00209	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar8SubclassProc
  0020e	6a fc		 push	 -4			; fffffffcH
  00210	68 f0 03 00 00	 push	 1008			; 000003f0H
  00215	56		 push	 esi
  00216	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar7Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar7Proc
  0021b	ff d7		 call	 edi
  0021d	50		 push	 eax
  0021e	ff d3		 call	 ebx

; 694  : 			wpOrigProgressBar9Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ9), GWL_WNDPROC, (LONG)ProgressBar9SubclassProc );

  00220	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar9SubclassProc
  00225	6a fc		 push	 -4			; fffffffcH
  00227	68 f1 03 00 00	 push	 1009			; 000003f1H
  0022c	56		 push	 esi
  0022d	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar8Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar8Proc
  00232	ff d7		 call	 edi
  00234	50		 push	 eax
  00235	ff d3		 call	 ebx

; 695  : 			wpOrigProgressBar10Proc = (WNDPROC)SetWindowLong( GetDlgItem(hWnd, IDC_PROGRESSHORZ10), GWL_WNDPROC, (LONG)ProgressBar10SubclassProc );

  00237	68 00 00 00 00	 push	 OFFSET FLAT:?ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z ; ProgressBar10SubclassProc
  0023c	6a fc		 push	 -4			; fffffffcH
  0023e	68 f2 03 00 00	 push	 1010			; 000003f2H
  00243	56		 push	 esi
  00244	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar9Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar9Proc
  00249	ff d7		 call	 edi
  0024b	50		 push	 eax
  0024c	ff d3		 call	 ebx
  0024e	a3 00 00 00 00	 mov	 DWORD PTR ?wpOrigProgressBar10Proc@@3P6GJPAUHWND__@@IIJ@ZA, eax ; wpOrigProgressBar10Proc

; 696  : 			
; 697  : 
; 698  : 			// tooltips
; 699  : 			g_hinst = g_hInst;

  00253	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
  00258	a3 00 00 00 00	 mov	 DWORD PTR ?g_hinst@@3PAUHINSTANCE__@@A, eax ; g_hinst

; 700  : 			g_hwndDlg = hWnd;	

  0025d	89 35 00 00 00
	00		 mov	 DWORD PTR ?g_hwndDlg@@3PAUHWND__@@A, esi ; g_hwndDlg

; 701  : 			DoCreateDialogTooltip();

  00263	e8 00 00 00 00	 call	 ?DoCreateDialogTooltip@@YAHXZ ; DoCreateDialogTooltip
$L49117:

; 740  : }

  00268	5f		 pop	 edi
  00269	5e		 pop	 esi
  0026a	33 c0		 xor	 eax, eax
  0026c	5b		 pop	 ebx
  0026d	83 c4 24	 add	 esp, 36			; 00000024H
  00270	c2 10 00	 ret	 16			; 00000010H
?Tab5DlgProc@@YGHPAUHWND__@@IIJ@Z ENDP			; Tab5DlgProc
_TEXT	ENDS
EXTRN	__imp__ClientToScreen@8:NEAR
EXTRN	?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z:NEAR ; DisplayContextMenu
EXTRN	__imp__CallWindowProcA@20:NEAR
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49174 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar1SubclassProc, COMDAT

; 755  : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 756  : 	//HMENU hMenu;
; 757  : 	POINT pt;
; 758  : 
; 759  : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 760  : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 761  : 	//HWND hwnd;                      // owner window
; 762  : 	//HBRUSH hbrush;                  // brush handle
; 763  : 	//static DWORD rgbCurrent;        // initial color selection
; 764  : 	
; 765  : 	// Initialize CHOOSECOLOR 
; 766  : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 767  : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 768  : 	cc.hwndOwner = hWnd;
; 769  : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 770  : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 771  : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 772  : 
; 773  : 
; 774  : 
; 775  :     // not necessary???
; 776  : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49174
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49184

; 777  :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 814  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49184:

; 778  : 	
; 779  : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49195
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49193
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49202

; 780  : 	{
; 781  : 		case WM_RBUTTONDOWN:
; 782  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 783  : 			// this is for windows menus
; 784  : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 785  : 			//SetMenu(hWnd, hMenu);
; 786  : 
; 787  : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 788  : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 789  : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 790  : 
; 791  : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 792  : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49202
$L49193:

; 793  : 		case WM_LBUTTONDBLCLK:
; 794  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 795  : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49202

; 796  : 				g_crColorBar[1] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 04 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+4, eax

; 797  : 			}
; 798  : 			break;

  000ba	eb 20		 jmp	 SHORT $L49202
$L49195:

; 799  : 		case WM_COMMAND:
; 800  : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49202

; 801  : 			{
; 802  : 				case ID_POPUP_COLOR:
; 803  : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 804  : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49202

; 805  : 						g_crColorBar[1] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 04 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+4, edx
$L49202:

; 806  : 					}
; 807  : 					break;
; 808  : 			}
; 809  : 			break;
; 810  : 			
; 811  : 	}
; 812  : 
; 813  :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 814  : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar1SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49212 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar2SubclassProc, COMDAT

; 819  : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 820  : 	//HMENU hMenu;
; 821  : 	POINT pt;
; 822  : 
; 823  : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 824  : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 825  : 	//HWND hwnd;                      // owner window
; 826  : 	//HBRUSH hbrush;                  // brush handle
; 827  : 	//static DWORD rgbCurrent;        // initial color selection
; 828  : 	
; 829  : 	// Initialize CHOOSECOLOR 
; 830  : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 831  : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 832  : 	cc.hwndOwner = hWnd;
; 833  : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 834  : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 835  : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 836  : 
; 837  : 
; 838  : 
; 839  :     // not necessary???
; 840  : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49212
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49222

; 841  :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 878  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49222:

; 842  : 	
; 843  : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49233
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49231
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49240

; 844  : 	{
; 845  : 		case WM_RBUTTONDOWN:
; 846  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 847  : 			// this is for windows menus
; 848  : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 849  : 			//SetMenu(hWnd, hMenu);
; 850  : 
; 851  : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 852  : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 853  : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 854  : 
; 855  : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 856  : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49240
$L49231:

; 857  : 		case WM_LBUTTONDBLCLK:
; 858  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 859  : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49240

; 860  : 				g_crColorBar[2] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 08 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+8, eax

; 861  : 			}
; 862  : 			break;

  000ba	eb 20		 jmp	 SHORT $L49240
$L49233:

; 863  : 		case WM_COMMAND:
; 864  : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49240

; 865  : 			{
; 866  : 				case ID_POPUP_COLOR:
; 867  : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 868  : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49240

; 869  : 						g_crColorBar[2] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 08 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+8, edx
$L49240:

; 870  : 					}
; 871  : 					break;
; 872  : 			}
; 873  : 			break;
; 874  : 			
; 875  : 	}
; 876  : 
; 877  :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 878  : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar2SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49250 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar3SubclassProc, COMDAT

; 883  : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 884  : 	//HMENU hMenu;
; 885  : 	POINT pt;
; 886  : 
; 887  : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 888  : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 889  : 	//HWND hwnd;                      // owner window
; 890  : 	//HBRUSH hbrush;                  // brush handle
; 891  : 	//static DWORD rgbCurrent;        // initial color selection
; 892  : 	
; 893  : 	// Initialize CHOOSECOLOR 
; 894  : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 895  : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 896  : 	cc.hwndOwner = hWnd;
; 897  : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 898  : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 899  : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 900  : 
; 901  : 
; 902  : 
; 903  :     // not necessary???
; 904  : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49250
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49260

; 905  :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 942  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49260:

; 906  : 	
; 907  : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49271
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49269
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49278

; 908  : 	{
; 909  : 		case WM_RBUTTONDOWN:
; 910  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 911  : 			// this is for windows menus
; 912  : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 913  : 			//SetMenu(hWnd, hMenu);
; 914  : 
; 915  : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 916  : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 917  : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 918  : 
; 919  : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 920  : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49278
$L49269:

; 921  : 		case WM_LBUTTONDBLCLK:
; 922  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 923  : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49278

; 924  : 				g_crColorBar[3] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 0c 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+12, eax

; 925  : 			}
; 926  : 			break;

  000ba	eb 20		 jmp	 SHORT $L49278
$L49271:

; 927  : 		case WM_COMMAND:
; 928  : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49278

; 929  : 			{
; 930  : 				case ID_POPUP_COLOR:
; 931  : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 932  : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49278

; 933  : 						g_crColorBar[3] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 0c 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+12, edx
$L49278:

; 934  : 					}
; 935  : 					break;
; 936  : 			}
; 937  : 			break;
; 938  : 			
; 939  : 	}
; 940  : 
; 941  :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 942  : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar3SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49288 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar4SubclassProc, COMDAT

; 947  : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 948  : 	//HMENU hMenu;
; 949  : 	POINT pt;
; 950  : 
; 951  : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 952  : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 953  : 	//HWND hwnd;                      // owner window
; 954  : 	//HBRUSH hbrush;                  // brush handle
; 955  : 	//static DWORD rgbCurrent;        // initial color selection
; 956  : 	
; 957  : 	// Initialize CHOOSECOLOR 
; 958  : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 959  : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 960  : 	cc.hwndOwner = hWnd;
; 961  : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 962  : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 963  : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 964  : 
; 965  : 
; 966  : 
; 967  :     // not necessary???
; 968  : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49288
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49298

; 969  :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 1006 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49298:

; 970  : 	
; 971  : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49309
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49307
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49316

; 972  : 	{
; 973  : 		case WM_RBUTTONDOWN:
; 974  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 975  : 			// this is for windows menus
; 976  : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 977  : 			//SetMenu(hWnd, hMenu);
; 978  : 
; 979  : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 980  : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 981  : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 982  : 
; 983  : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 984  : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49316
$L49307:

; 985  : 		case WM_LBUTTONDBLCLK:
; 986  : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 987  : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49316

; 988  : 				g_crColorBar[4] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 10 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+16, eax

; 989  : 			}
; 990  : 			break;

  000ba	eb 20		 jmp	 SHORT $L49316
$L49309:

; 991  : 		case WM_COMMAND:
; 992  : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49316

; 993  : 			{
; 994  : 				case ID_POPUP_COLOR:
; 995  : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 996  : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49316

; 997  : 						g_crColorBar[4] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 10 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+16, edx
$L49316:

; 998  : 					}
; 999  : 					break;
; 1000 : 			}
; 1001 : 			break;
; 1002 : 			
; 1003 : 	}
; 1004 : 
; 1005 :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 1006 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar4SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49326 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar5SubclassProc, COMDAT

; 1011 : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 1012 : 	//HMENU hMenu;
; 1013 : 	POINT pt;
; 1014 : 
; 1015 : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 1016 : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 1017 : 	//HWND hwnd;                      // owner window
; 1018 : 	//HBRUSH hbrush;                  // brush handle
; 1019 : 	//static DWORD rgbCurrent;        // initial color selection
; 1020 : 	
; 1021 : 	// Initialize CHOOSECOLOR 
; 1022 : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 1023 : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 1024 : 	cc.hwndOwner = hWnd;
; 1025 : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 1026 : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 1027 : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 1028 : 
; 1029 : 
; 1030 : 
; 1031 :     // not necessary???
; 1032 : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49326
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49336

; 1033 :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 1070 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49336:

; 1034 : 	
; 1035 : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49347
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49345
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49354

; 1036 : 	{
; 1037 : 		case WM_RBUTTONDOWN:
; 1038 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1039 : 			// this is for windows menus
; 1040 : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 1041 : 			//SetMenu(hWnd, hMenu);
; 1042 : 
; 1043 : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 1044 : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 1045 : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1046 : 
; 1047 : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 1048 : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49354
$L49345:

; 1049 : 		case WM_LBUTTONDBLCLK:
; 1050 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1051 : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49354

; 1052 : 				g_crColorBar[5] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 14 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+20, eax

; 1053 : 			}
; 1054 : 			break;

  000ba	eb 20		 jmp	 SHORT $L49354
$L49347:

; 1055 : 		case WM_COMMAND:
; 1056 : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49354

; 1057 : 			{
; 1058 : 				case ID_POPUP_COLOR:
; 1059 : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1060 : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49354

; 1061 : 						g_crColorBar[5] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 14 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+20, edx
$L49354:

; 1062 : 					}
; 1063 : 					break;
; 1064 : 			}
; 1065 : 			break;
; 1066 : 			
; 1067 : 	}
; 1068 : 
; 1069 :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 1070 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar5SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49364 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar6SubclassProc, COMDAT

; 1075 : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 1076 : 	//HMENU hMenu;
; 1077 : 	POINT pt;
; 1078 : 
; 1079 : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 1080 : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 1081 : 	//HWND hwnd;                      // owner window
; 1082 : 	//HBRUSH hbrush;                  // brush handle
; 1083 : 	//static DWORD rgbCurrent;        // initial color selection
; 1084 : 	
; 1085 : 	// Initialize CHOOSECOLOR 
; 1086 : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 1087 : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 1088 : 	cc.hwndOwner = hWnd;
; 1089 : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 1090 : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 1091 : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 1092 : 
; 1093 : 
; 1094 : 
; 1095 :     // not necessary???
; 1096 : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49364
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49374

; 1097 :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 1134 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49374:

; 1098 : 	
; 1099 : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49385
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49383
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49392

; 1100 : 	{
; 1101 : 		case WM_RBUTTONDOWN:
; 1102 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1103 : 			// this is for windows menus
; 1104 : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 1105 : 			//SetMenu(hWnd, hMenu);
; 1106 : 
; 1107 : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 1108 : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 1109 : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1110 : 
; 1111 : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 1112 : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49392
$L49383:

; 1113 : 		case WM_LBUTTONDBLCLK:
; 1114 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1115 : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49392

; 1116 : 				g_crColorBar[6] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 18 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+24, eax

; 1117 : 			}
; 1118 : 			break;

  000ba	eb 20		 jmp	 SHORT $L49392
$L49385:

; 1119 : 		case WM_COMMAND:
; 1120 : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49392

; 1121 : 			{
; 1122 : 				case ID_POPUP_COLOR:
; 1123 : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1124 : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49392

; 1125 : 						g_crColorBar[6] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 18 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+24, edx
$L49392:

; 1126 : 					}
; 1127 : 					break;
; 1128 : 			}
; 1129 : 			break;
; 1130 : 			
; 1131 : 	}
; 1132 : 
; 1133 :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 1134 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar6SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49402 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar7SubclassProc, COMDAT

; 1139 : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 1140 : 	//HMENU hMenu;
; 1141 : 	POINT pt;
; 1142 : 
; 1143 : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 1144 : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 1145 : 	//HWND hwnd;                      // owner window
; 1146 : 	//HBRUSH hbrush;                  // brush handle
; 1147 : 	//static DWORD rgbCurrent;        // initial color selection
; 1148 : 	
; 1149 : 	// Initialize CHOOSECOLOR 
; 1150 : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 1151 : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 1152 : 	cc.hwndOwner = hWnd;
; 1153 : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 1154 : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 1155 : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 1156 : 
; 1157 : 
; 1158 : 
; 1159 :     // not necessary???
; 1160 : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49402
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49412

; 1161 :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 1198 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49412:

; 1162 : 	
; 1163 : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49423
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49421
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49430

; 1164 : 	{
; 1165 : 		case WM_RBUTTONDOWN:
; 1166 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1167 : 			// this is for windows menus
; 1168 : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 1169 : 			//SetMenu(hWnd, hMenu);
; 1170 : 
; 1171 : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 1172 : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 1173 : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1174 : 
; 1175 : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 1176 : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49430
$L49421:

; 1177 : 		case WM_LBUTTONDBLCLK:
; 1178 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1179 : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49430

; 1180 : 				g_crColorBar[7] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 1c 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+28, eax

; 1181 : 			}
; 1182 : 			break;

  000ba	eb 20		 jmp	 SHORT $L49430
$L49423:

; 1183 : 		case WM_COMMAND:
; 1184 : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49430

; 1185 : 			{
; 1186 : 				case ID_POPUP_COLOR:
; 1187 : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1188 : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49430

; 1189 : 						g_crColorBar[7] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 1c 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+28, edx
$L49430:

; 1190 : 					}
; 1191 : 					break;
; 1192 : 			}
; 1193 : 			break;
; 1194 : 			
; 1195 : 	}
; 1196 : 
; 1197 :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 1198 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar7SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49440 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar8SubclassProc, COMDAT

; 1203 : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 1204 : 	//HMENU hMenu;
; 1205 : 	POINT pt;
; 1206 : 
; 1207 : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 1208 : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 1209 : 	//HWND hwnd;                      // owner window
; 1210 : 	//HBRUSH hbrush;                  // brush handle
; 1211 : 	//static DWORD rgbCurrent;        // initial color selection
; 1212 : 	
; 1213 : 	// Initialize CHOOSECOLOR 
; 1214 : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 1215 : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 1216 : 	cc.hwndOwner = hWnd;
; 1217 : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 1218 : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 1219 : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 1220 : 
; 1221 : 
; 1222 : 
; 1223 :     // not necessary???
; 1224 : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49440
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49450

; 1225 :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 1262 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49450:

; 1226 : 	
; 1227 : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49461
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49459
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49468

; 1228 : 	{
; 1229 : 		case WM_RBUTTONDOWN:
; 1230 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1231 : 			// this is for windows menus
; 1232 : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 1233 : 			//SetMenu(hWnd, hMenu);
; 1234 : 
; 1235 : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 1236 : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 1237 : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1238 : 
; 1239 : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 1240 : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49468
$L49459:

; 1241 : 		case WM_LBUTTONDBLCLK:
; 1242 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1243 : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49468

; 1244 : 				g_crColorBar[8] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 20 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+32, eax

; 1245 : 			}
; 1246 : 			break;

  000ba	eb 20		 jmp	 SHORT $L49468
$L49461:

; 1247 : 		case WM_COMMAND:
; 1248 : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49468

; 1249 : 			{
; 1250 : 				case ID_POPUP_COLOR:
; 1251 : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1252 : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49468

; 1253 : 						g_crColorBar[8] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 20 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+32, edx
$L49468:

; 1254 : 					}
; 1255 : 					break;
; 1256 : 			}
; 1257 : 			break;
; 1258 : 			
; 1259 : 	}
; 1260 : 
; 1261 :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 1262 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar8SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49478 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar9SubclassProc, COMDAT

; 1267 : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 1268 : 	//HMENU hMenu;
; 1269 : 	POINT pt;
; 1270 : 
; 1271 : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 1272 : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 1273 : 	//HWND hwnd;                      // owner window
; 1274 : 	//HBRUSH hbrush;                  // brush handle
; 1275 : 	//static DWORD rgbCurrent;        // initial color selection
; 1276 : 	
; 1277 : 	// Initialize CHOOSECOLOR 
; 1278 : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 1279 : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 1280 : 	cc.hwndOwner = hWnd;
; 1281 : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 1282 : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 1283 : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 1284 : 
; 1285 : 
; 1286 : 
; 1287 :     // not necessary???
; 1288 : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49478
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49488

; 1289 :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 1326 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49488:

; 1290 : 	
; 1291 : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49499
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49497
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49506

; 1292 : 	{
; 1293 : 		case WM_RBUTTONDOWN:
; 1294 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1295 : 			// this is for windows menus
; 1296 : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 1297 : 			//SetMenu(hWnd, hMenu);
; 1298 : 
; 1299 : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 1300 : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 1301 : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1302 : 
; 1303 : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 1304 : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49506
$L49497:

; 1305 : 		case WM_LBUTTONDBLCLK:
; 1306 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1307 : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49506

; 1308 : 				g_crColorBar[9] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 24 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+36, eax

; 1309 : 			}
; 1310 : 			break;

  000ba	eb 20		 jmp	 SHORT $L49506
$L49499:

; 1311 : 		case WM_COMMAND:
; 1312 : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49506

; 1313 : 			{
; 1314 : 				case ID_POPUP_COLOR:
; 1315 : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1316 : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49506

; 1317 : 						g_crColorBar[9] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 24 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+36, edx
$L49506:

; 1318 : 					}
; 1319 : 					break;
; 1320 : 			}
; 1321 : 			break;
; 1322 : 			
; 1323 : 	}
; 1324 : 
; 1325 :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 1326 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar9SubclassProc
_TEXT	ENDS
_BSS	SEGMENT
_?acrCustClr@?1??ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49516 DD 010H DUP (?)
_BSS	ENDS
;	COMDAT ?ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_pt$ = -44
_cc$ = -36
?ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR ; ProgressBar10SubclassProc, COMDAT

; 1331 : { 

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00003	56		 push	 esi

; 1332 : 	//HMENU hMenu;
; 1333 : 	POINT pt;
; 1334 : 
; 1335 : 	CHOOSECOLOR cc;                 // common dialog box structure 
; 1336 : 	static COLORREF acrCustClr[16]; // array of custom colors 
; 1337 : 	//HWND hwnd;                      // owner window
; 1338 : 	//HBRUSH hbrush;                  // brush handle
; 1339 : 	//static DWORD rgbCurrent;        // initial color selection
; 1340 : 	
; 1341 : 	// Initialize CHOOSECOLOR 
; 1342 : 	ZeroMemory(&cc, sizeof(CHOOSECOLOR));
; 1343 : 	cc.lStructSize = sizeof(CHOOSECOLOR);
; 1344 : 	cc.hwndOwner = hWnd;
; 1345 : 	cc.lpCustColors = (LPDWORD) acrCustClr;
; 1346 : 	cc.rgbResult = RGB(0,0,255); //rgbCurrent;
; 1347 : 	cc.Flags = /*CC_FULLOPEN |*/ CC_RGBINIT;
; 1348 : 
; 1349 : 
; 1350 : 
; 1351 :     // not necessary???
; 1352 : 	if (uMsg == WM_GETDLGCODE) 

  00004	8b 74 24 38	 mov	 esi, DWORD PTR _uMsg$[esp+44]
  00008	57		 push	 edi
  00009	b9 09 00 00 00	 mov	 ecx, 9
  0000e	33 c0		 xor	 eax, eax
  00010	8d 7c 24 10	 lea	 edi, DWORD PTR _cc$[esp+52]
  00014	f3 ab		 rep stosd
  00016	8b 7c 24 38	 mov	 edi, DWORD PTR _hWnd$[esp+48]
  0001a	81 fe 87 00 00
	00		 cmp	 esi, 135		; 00000087H
  00020	c7 44 24 10 24
	00 00 00	 mov	 DWORD PTR _cc$[esp+52], 36 ; 00000024H
  00028	89 7c 24 14	 mov	 DWORD PTR _cc$[esp+56], edi
  0002c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _cc$[esp+68], OFFSET FLAT:_?acrCustClr@?1??ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z@4PAKA$S49516
  00034	c7 44 24 1c 00
	00 ff 00	 mov	 DWORD PTR _cc$[esp+64], 16711680 ; 00ff0000H
  0003c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR _cc$[esp+72], 1
  00044	75 0d		 jne	 SHORT $L49526

; 1353 :         return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;

  00046	b8 04 21 00 00	 mov	 eax, 8452		; 00002104H

; 1390 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	83 c4 2c	 add	 esp, 44			; 0000002cH
  00050	c2 10 00	 ret	 16			; 00000010H
$L49526:

; 1354 : 	
; 1355 : 	switch (uMsg)

  00053	8b c6		 mov	 eax, esi
  00055	55		 push	 ebp
  00056	8b 6c 24 44	 mov	 ebp, DWORD PTR _wParam$[esp+52]
  0005a	53		 push	 ebx
  0005b	8b 5c 24 4c	 mov	 ebx, DWORD PTR _lParam$[esp+56]
  0005f	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00064	74 56		 je	 SHORT $L49537
  00066	2d f2 00 00 00	 sub	 eax, 242		; 000000f2H
  0006b	74 35		 je	 SHORT $L49535
  0006d	48		 dec	 eax
  0006e	75 6c		 jne	 SHORT $L49544

; 1356 : 	{
; 1357 : 		case WM_RBUTTONDOWN:
; 1358 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1359 : 			// this is for windows menus
; 1360 : 			//hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_MENU1));
; 1361 : 			//SetMenu(hWnd, hMenu);
; 1362 : 
; 1363 : 			pt.x = LOWORD(lParam);

  00070	8b c3		 mov	 eax, ebx

; 1364 : 			pt.y = HIWORD(lParam);

  00072	8b cb		 mov	 ecx, ebx

; 1365 : 			ClientToScreen(hWnd, &pt);

  00074	8d 54 24 10	 lea	 edx, DWORD PTR _pt$[esp+60]
  00078	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00080	52		 push	 edx
  00081	57		 push	 edi
  00082	89 44 24 18	 mov	 DWORD PTR _pt$[esp+68], eax
  00086	89 4c 24 1c	 mov	 DWORD PTR _pt$[esp+72], ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1366 : 
; 1367 : 			DisplayContextMenu(hWnd, pt);

  00090	8b 44 24 14	 mov	 eax, DWORD PTR _pt$[esp+64]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _pt$[esp+60]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?DisplayContextMenu@@YGXPAUHWND__@@UtagPOINT@@@Z ; DisplayContextMenu

; 1368 : 			break;

  000a0	eb 3a		 jmp	 SHORT $L49544
$L49535:

; 1369 : 		case WM_LBUTTONDBLCLK:
; 1370 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1371 : 			if (ChooseColor(&cc)==TRUE) {

  000a2	8d 54 24 18	 lea	 edx, DWORD PTR _cc$[esp+60]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _ChooseColorA@4
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 2b		 jne	 SHORT $L49544

; 1372 : 				g_crColorBar[10] = cc.rgbResult;

  000b1	8b 44 24 24	 mov	 eax, DWORD PTR _cc$[esp+72]
  000b5	a3 28 00 00 00	 mov	 DWORD PTR ?g_crColorBar@@3PAKA+40, eax

; 1373 : 			}
; 1374 : 			break;

  000ba	eb 20		 jmp	 SHORT $L49544
$L49537:

; 1375 : 		case WM_COMMAND:
; 1376 : 			switch( LOWORD(wParam) )

  000bc	66 81 fd 48 9c	 cmp	 bp, 40008		; 00009c48H
  000c1	75 19		 jne	 SHORT $L49544

; 1377 : 			{
; 1378 : 				case ID_POPUP_COLOR:
; 1379 : 					//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1380 : 					if (ChooseColor(&cc)==TRUE) {

  000c3	8d 4c 24 18	 lea	 ecx, DWORD PTR _cc$[esp+60]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _ChooseColorA@4
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 0a		 jne	 SHORT $L49544

; 1381 : 						g_crColorBar[10] = cc.rgbResult;

  000d2	8b 54 24 24	 mov	 edx, DWORD PTR _cc$[esp+72]
  000d6	89 15 28 00 00
	00		 mov	 DWORD PTR ?g_crColorBar@@3PAKA+40, edx
$L49544:

; 1382 : 					}
; 1383 : 					break;
; 1384 : 			}
; 1385 : 			break;
; 1386 : 			
; 1387 : 	}
; 1388 : 
; 1389 :     return CallWindowProc((WNDPROC)wpOrigProgressBar1Proc, hWnd, uMsg, wParam, lParam); 

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wpOrigProgressBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigProgressBar1Proc
  000e1	53		 push	 ebx
  000e2	55		 push	 ebp
  000e3	56		 push	 esi
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp

; 1390 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f3	c2 10 00	 ret	 16			; 00000010H
?ProgressBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; ProgressBar10SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar1SubclassProc, COMDAT

; 1399 : { 

  00000	56		 push	 esi

; 1400 :     // This was so evil: it prevented us from tabbing to the next dialog item
; 1401 : 	// not necessary???
; 1402 : 	//if (uMsg == WM_GETDLGCODE) 
; 1403 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1404 : 	
; 1405 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49555
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49552

; 1410 : 			break;
; 1411 : 		case WM_KILLFOCUS:
; 1412 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1413 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS1), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49552
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 90 04 00 00	 push	 1168			; 00000490H
  00024	50		 push	 eax

; 1414 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49817
$L49555:

; 1406 : 	{
; 1407 : 		case WM_SETFOCUS:
; 1408 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1409 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS1), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 90 04 00 00	 push	 1168			; 00000490H
  00034	51		 push	 ecx
$L49817:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49552:

; 1415 : 
; 1416 : 	}
; 1417 : 
; 1418 :     return CallWindowProc((WNDPROC)wpOrigTrackBar1Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar1Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar1Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1419 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar1SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar1SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar2SubclassProc, COMDAT

; 1424 : { 

  00000	56		 push	 esi

; 1425 :     // not necessary???
; 1426 : 	//if (uMsg == WM_GETDLGCODE) 
; 1427 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1428 : 	
; 1429 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49568
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49565

; 1434 : 			break;
; 1435 : 		case WM_KILLFOCUS:
; 1436 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1437 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS2), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49565
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 91 04 00 00	 push	 1169			; 00000491H
  00024	50		 push	 eax

; 1438 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49819
$L49568:

; 1430 : 	{
; 1431 : 		case WM_SETFOCUS:
; 1432 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1433 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS2), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 91 04 00 00	 push	 1169			; 00000491H
  00034	51		 push	 ecx
$L49819:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49565:

; 1439 : 
; 1440 : 	}
; 1441 : 
; 1442 :     return CallWindowProc((WNDPROC)wpOrigTrackBar2Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar2Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar2Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1443 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar2SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar2SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar3SubclassProc, COMDAT

; 1448 : { 

  00000	56		 push	 esi

; 1449 :     // not necessary???
; 1450 : 	//if (uMsg == WM_GETDLGCODE) 
; 1451 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1452 : 	
; 1453 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49581
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49578

; 1458 : 			break;
; 1459 : 		case WM_KILLFOCUS:
; 1460 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1461 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS3), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49578
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 92 04 00 00	 push	 1170			; 00000492H
  00024	50		 push	 eax

; 1462 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49821
$L49581:

; 1454 : 	{
; 1455 : 		case WM_SETFOCUS:
; 1456 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1457 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS3), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 92 04 00 00	 push	 1170			; 00000492H
  00034	51		 push	 ecx
$L49821:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49578:

; 1463 : 
; 1464 : 	}
; 1465 : 
; 1466 :     return CallWindowProc((WNDPROC)wpOrigTrackBar3Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar3Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar3Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1467 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar3SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar3SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar4SubclassProc, COMDAT

; 1472 : { 

  00000	56		 push	 esi

; 1473 :     // not necessary???
; 1474 : 	//if (uMsg == WM_GETDLGCODE) 
; 1475 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1476 : 	
; 1477 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49594
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49591

; 1482 : 			break;
; 1483 : 		case WM_KILLFOCUS:
; 1484 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1485 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS4), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49591
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 93 04 00 00	 push	 1171			; 00000493H
  00024	50		 push	 eax

; 1486 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49823
$L49594:

; 1478 : 	{
; 1479 : 		case WM_SETFOCUS:
; 1480 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1481 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS4), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 93 04 00 00	 push	 1171			; 00000493H
  00034	51		 push	 ecx
$L49823:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49591:

; 1487 : 
; 1488 : 	}
; 1489 : 
; 1490 :     return CallWindowProc((WNDPROC)wpOrigTrackBar4Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar4Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar4Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1491 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar4SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar4SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar5SubclassProc, COMDAT

; 1496 : { 

  00000	56		 push	 esi

; 1497 :     // not necessary???
; 1498 : 	//if (uMsg == WM_GETDLGCODE) 
; 1499 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1500 : 	
; 1501 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49607
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49604

; 1506 : 			break;
; 1507 : 		case WM_KILLFOCUS:
; 1508 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1509 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS5), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49604
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 94 04 00 00	 push	 1172			; 00000494H
  00024	50		 push	 eax

; 1510 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49825
$L49607:

; 1502 : 	{
; 1503 : 		case WM_SETFOCUS:
; 1504 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1505 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS5), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 94 04 00 00	 push	 1172			; 00000494H
  00034	51		 push	 ecx
$L49825:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49604:

; 1511 : 
; 1512 : 	}
; 1513 : 
; 1514 :     return CallWindowProc((WNDPROC)wpOrigTrackBar5Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar5Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar5Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1515 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar5SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar5SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar6SubclassProc, COMDAT

; 1520 : { 

  00000	56		 push	 esi

; 1521 :     // not necessary???
; 1522 : 	//if (uMsg == WM_GETDLGCODE) 
; 1523 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1524 : 	
; 1525 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49620
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49617

; 1530 : 			break;
; 1531 : 		case WM_KILLFOCUS:
; 1532 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1533 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS6), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49617
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 95 04 00 00	 push	 1173			; 00000495H
  00024	50		 push	 eax

; 1534 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49827
$L49620:

; 1526 : 	{
; 1527 : 		case WM_SETFOCUS:
; 1528 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1529 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS6), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 95 04 00 00	 push	 1173			; 00000495H
  00034	51		 push	 ecx
$L49827:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49617:

; 1535 : 
; 1536 : 	}
; 1537 : 
; 1538 :     return CallWindowProc((WNDPROC)wpOrigTrackBar6Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar6Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar6Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1539 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar6SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar6SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar7SubclassProc, COMDAT

; 1544 : { 

  00000	56		 push	 esi

; 1545 :     // not necessary???
; 1546 : 	//if (uMsg == WM_GETDLGCODE) 
; 1547 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1548 : 	
; 1549 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49633
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49630

; 1554 : 			break;
; 1555 : 		case WM_KILLFOCUS:
; 1556 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1557 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS7), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49630
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 96 04 00 00	 push	 1174			; 00000496H
  00024	50		 push	 eax

; 1558 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49829
$L49633:

; 1550 : 	{
; 1551 : 		case WM_SETFOCUS:
; 1552 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1553 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS7), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 96 04 00 00	 push	 1174			; 00000496H
  00034	51		 push	 ecx
$L49829:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49630:

; 1559 : 
; 1560 : 	}
; 1561 : 
; 1562 :     return CallWindowProc((WNDPROC)wpOrigTrackBar7Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar7Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar7Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1563 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar7SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar7SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar8SubclassProc, COMDAT

; 1568 : { 

  00000	56		 push	 esi

; 1569 :     // not necessary???
; 1570 : 	//if (uMsg == WM_GETDLGCODE) 
; 1571 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1572 : 	
; 1573 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49646
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49643

; 1578 : 			break;
; 1579 : 		case WM_KILLFOCUS:
; 1580 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1581 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS8), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49643
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 97 04 00 00	 push	 1175			; 00000497H
  00024	50		 push	 eax

; 1582 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49831
$L49646:

; 1574 : 	{
; 1575 : 		case WM_SETFOCUS:
; 1576 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1577 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS8), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 97 04 00 00	 push	 1175			; 00000497H
  00034	51		 push	 ecx
$L49831:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49643:

; 1583 : 
; 1584 : 	}
; 1585 : 
; 1586 :     return CallWindowProc((WNDPROC)wpOrigTrackBar8Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar8Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar8Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1587 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar8SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar8SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar9SubclassProc, COMDAT

; 1592 : { 

  00000	56		 push	 esi

; 1593 :     // not necessary???
; 1594 : 	//if (uMsg == WM_GETDLGCODE) 
; 1595 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1596 : 	
; 1597 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49659
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49656

; 1602 : 			break;
; 1603 : 		case WM_KILLFOCUS:
; 1604 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1605 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS9), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49656
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 98 04 00 00	 push	 1176			; 00000498H
  00024	50		 push	 eax

; 1606 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49833
$L49659:

; 1598 : 	{
; 1599 : 		case WM_SETFOCUS:
; 1600 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1601 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS9), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 98 04 00 00	 push	 1176			; 00000498H
  00034	51		 push	 ecx
$L49833:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49656:

; 1607 : 
; 1608 : 	}
; 1609 : 
; 1610 :     return CallWindowProc((WNDPROC)wpOrigTrackBar9Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar9Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar9Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1611 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar9SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar9SubclassProc
_TEXT	ENDS
;	COMDAT ?TrackBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
?TrackBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z PROC NEAR	; TrackBar10SubclassProc, COMDAT

; 1616 : { 

  00000	56		 push	 esi

; 1617 :     // not necessary???
; 1618 : 	//if (uMsg == WM_GETDLGCODE) 
; 1619 :     //    return DLGC_WANTALLKEYS|DLGC_BUTTON|DLGC_STATIC;
; 1620 : 	
; 1621 : 	switch (uMsg)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _uMsg$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	83 e8 07	 sub	 eax, 7
  0000a	74 1b		 je	 SHORT $L49672
  0000c	48		 dec	 eax
  0000d	75 33		 jne	 SHORT $L49669

; 1626 : 			break;
; 1627 : 		case WM_KILLFOCUS:
; 1628 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1629 : 			if (!g_bShowPercent) ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS10), FALSE);

  0000f	a0 00 00 00 00	 mov	 al, BYTE PTR ?g_bShowPercent@@3_NA ; g_bShowPercent
  00014	84 c0		 test	 al, al
  00016	75 2a		 jne	 SHORT $L49669
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0001d	6a 00		 push	 0
  0001f	68 99 04 00 00	 push	 1177			; 00000499H
  00024	50		 push	 eax

; 1630 : 			break;

  00025	eb 0e		 jmp	 SHORT $L49835
$L49672:

; 1622 : 	{
; 1623 : 		case WM_SETFOCUS:
; 1624 : 			//MessageBox(NULL,"qqq!","QQQ!",MB_OK);
; 1625 : 			ShowWindow( GetDlgItem(g_hTabCurrent, IDC_STATICSENS10), TRUE);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hTabCurrent@@3PAUHWND__@@A ; g_hTabCurrent
  0002d	6a 01		 push	 1
  0002f	68 99 04 00 00	 push	 1177			; 00000499H
  00034	51		 push	 ecx
$L49835:
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$L49669:

; 1631 : 
; 1632 : 	}
; 1633 : 
; 1634 :     return CallWindowProc((WNDPROC)wpOrigTrackBar10Proc, hWnd, uMsg, wParam, lParam); 

  00042	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _wParam$[esp]
  0004a	8b 4c 24 08	 mov	 ecx, DWORD PTR _hWnd$[esp]
  0004e	52		 push	 edx
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wpOrigTrackBar10Proc@@3P6GJPAUHWND__@@IIJ@ZA ; wpOrigTrackBar10Proc
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1635 : }

  0005f	5e		 pop	 esi
  00060	c2 10 00	 ret	 16			; 00000010H
?TrackBar10SubclassProc@@YGJPAUHWND__@@IIJ@Z ENDP	; TrackBar10SubclassProc
_TEXT	ENDS
END
